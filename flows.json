[
    {
        "id": "60e059d3.b0f6b8",
        "type": "tab",
        "label": "Configuracion",
        "disabled": false,
        "info": ""
    },
    {
        "id": "7ee81df4.bfea84",
        "type": "tab",
        "label": "Integrations",
        "disabled": false,
        "info": ""
    },
    {
        "id": "c289f04a.5490c",
        "type": "tab",
        "label": "PSeguros - Consultas",
        "disabled": false,
        "info": ""
    },
    {
        "id": "7ee549ef.0fbb28",
        "type": "tab",
        "label": "PSeguros - Cotizaciones",
        "disabled": false,
        "info": ""
    },
    {
        "id": "5eeb304d.24308",
        "type": "tab",
        "label": "LOG",
        "disabled": false,
        "info": ""
    },
    {
        "id": "248b9587.09adfa",
        "type": "subflow",
        "name": "PSeguros - Auth",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 460,
                "y": 380,
                "wires": [
                    {
                        "id": "53aa28bc.29bf98"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1380,
                "y": 380,
                "wires": [
                    {
                        "id": "e952cbad.53cbd8",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "c0a2e33c.1511f",
        "type": "telegram bot",
        "botname": "PSegurosBot",
        "usernames": "",
        "chatids": "",
        "baseapiurl": "",
        "updatemode": "polling",
        "pollinterval": "300",
        "usesocks": false,
        "sockshost": "",
        "socksport": "6667",
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": "8443",
        "publicbotport": "8443",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "6e3cb7e8.3326f8",
        "type": "Stackhero-MySQL-Server",
        "name": "MindbotLog",
        "host": "${log_Url}",
        "port": "${log_Port}",
        "tls": false,
        "database": "MindbotLog"
    },
    {
        "id": "3f4b9f1f.e14f1",
        "type": "telegram receiver",
        "z": "7ee81df4.bfea84",
        "name": "",
        "bot": "c0a2e33c.1511f",
        "saveDataDir": "",
        "filterCommands": false,
        "x": 190,
        "y": 220,
        "wires": [
            [
                "93d23625.10d5f8",
                "c0f41767.f57208"
            ],
            []
        ]
    },
    {
        "id": "e78ac438.3320e8",
        "type": "telegram sender",
        "z": "7ee81df4.bfea84",
        "name": "",
        "bot": "c0a2e33c.1511f",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1430,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "93d23625.10d5f8",
        "type": "debug",
        "z": "7ee81df4.bfea84",
        "name": "Telegram receiver",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 60,
        "wires": []
    },
    {
        "id": "63a91f15.a4e6a",
        "type": "http request",
        "z": "7ee81df4.bfea84",
        "name": "New visitor",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://rocket.it.mindbot.com.ar/api/v1/livechat/visitor",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1490,
        "y": 360,
        "wires": [
            [
                "51a1093e.9a7ff8",
                "dfed7cc7.c7027"
            ]
        ]
    },
    {
        "id": "79f5db67.0cb104",
        "type": "function",
        "z": "7ee81df4.bfea84",
        "name": "New visitor Payload",
        "func": "//https://docs.rocket.chat/api/rest-api/methods/livechat/visitor#payload\n\n//Obtener datos de Telegram\nlet fullName = msg.originalMessage.from.first_name + \" \" + msg.originalMessage.from.last_name;\n//Usar id de Usuario de Telegram como TOKEN - lo espera en String\nlet token = msg.originalMessage.from.id.toString()\n\nlet visitor = {};\n\nvisitor.name = fullName;\nvisitor.token = token;\nvisitor.customFields = [];\n\n//Custom Field para informar el CANAL\n\nvisitor.customFields.push({key:\"chanel\", value:\"telegram\", overwrite:true});\n\nmsg.payload = {};\nmsg.payload.visitor = visitor;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1230,
        "y": 360,
        "wires": [
            [
                "74e7208b.04a33",
                "63a91f15.a4e6a"
            ]
        ]
    },
    {
        "id": "74e7208b.04a33",
        "type": "debug",
        "z": "7ee81df4.bfea84",
        "name": "New visitor Payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1450,
        "y": 300,
        "wires": []
    },
    {
        "id": "c0f41767.f57208",
        "type": "function",
        "z": "7ee81df4.bfea84",
        "name": "Get visitor data Payload",
        "func": "//https://docs.rocket.chat/api/rest-api/methods/livechat/visitor#payload\n\n//Usar id de Usuario de Telegram como TOKEN\nlet token = msg.originalMessage.from.id\n\nmsg.url = \"https://rocket.it.mindbot.com.ar/api/v1/livechat/visitor/\" + token;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 490,
        "y": 200,
        "wires": [
            [
                "22826c11.f10fb4"
            ]
        ]
    },
    {
        "id": "22826c11.f10fb4",
        "type": "http request",
        "z": "7ee81df4.bfea84",
        "name": "Get visitor data",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 820,
        "y": 200,
        "wires": [
            [
                "7ab5d913.53ffa8",
                "ea9d6124.d69fd",
                "db404bb5.08c118"
            ]
        ]
    },
    {
        "id": "7ab5d913.53ffa8",
        "type": "debug",
        "z": "7ee81df4.bfea84",
        "name": "Get visitor data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 60,
        "wires": []
    },
    {
        "id": "51a1093e.9a7ff8",
        "type": "debug",
        "z": "7ee81df4.bfea84",
        "name": "New visitor Response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1720,
        "y": 300,
        "wires": []
    },
    {
        "id": "d8a93589.9ba8f8",
        "type": "comment",
        "z": "7ee81df4.bfea84",
        "name": "Example response",
        "info": "{\"visitor\":{\"_id\":\"5NeTKRb5YzZ4wE3Mi\",\"username\":\"guest-6\",\"ts\":\"2021-01-19T12:26:32.789Z\",\"ip\":\"192.168.1.1\",\"host\":\"rocket.it.mindbot.com.ar\",\"_updatedAt\":\"2021-01-19T12:26:32.791Z\",\"name\":\"Andres Petrillo\",\"token\":\"869282068\"},\"success\":true}\n\n{\"visitor\":{\"_id\":\"5NeTKRb5YzZ4wE3Mi\",\"username\":\"guest-6\",\"ts\":\"2021-01-19T12:26:32.789Z\",\"ip\":\"192.168.1.1\",\"host\":\"rocket.it.mindbot.com.ar\",\"_updatedAt\":\"2021-01-19T12:26:32.791Z\",\"name\":\"Andres Petrillo\",\"token\":\"869282068\"},\"success\":true}",
        "x": 950,
        "y": 300,
        "wires": []
    },
    {
        "id": "db404bb5.08c118",
        "type": "switch",
        "z": "7ee81df4.bfea84",
        "name": "Check visitor exists",
        "property": "payload.visitor",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1150,
        "y": 200,
        "wires": [
            [
                "4c4953ed.decb2c",
                "dfed7cc7.c7027"
            ],
            [
                "79f5db67.0cb104",
                "9de6f676.6b1328"
            ]
        ]
    },
    {
        "id": "dfed7cc7.c7027",
        "type": "function",
        "z": "7ee81df4.bfea84",
        "name": "Get config (Obtengo room)",
        "func": "//https://docs.rocket.chat/api/rest-api/methods/livechat/room\n\n//Usar id de Usuario de Telegram como TOKEN\nlet token = msg.originalMessage.from.id\n\nmsg.url = \"https://rocket.it.mindbot.com.ar/api/v1/livechat/config?token=\" + token;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1700,
        "y": 200,
        "wires": [
            [
                "506b3875.adacc8"
            ]
        ]
    },
    {
        "id": "506b3875.adacc8",
        "type": "http request",
        "z": "7ee81df4.bfea84",
        "name": "Get config",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1950,
        "y": 200,
        "wires": [
            [
                "4551ea09.6b2dc4"
            ]
        ]
    },
    {
        "id": "ea9d6124.d69fd",
        "type": "debug",
        "z": "7ee81df4.bfea84",
        "name": "Visitor data to json",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 60,
        "wires": []
    },
    {
        "id": "4551ea09.6b2dc4",
        "type": "json",
        "z": "7ee81df4.bfea84",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 2130,
        "y": 200,
        "wires": [
            [
                "bfe45ba3.557ce8",
                "3e8ca4e8.4b9dfc"
            ]
        ]
    },
    {
        "id": "bfe45ba3.557ce8",
        "type": "debug",
        "z": "7ee81df4.bfea84",
        "name": "to json",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2430,
        "y": 60,
        "wires": []
    },
    {
        "id": "2af94aa3.5b5f46",
        "type": "function",
        "z": "7ee81df4.bfea84",
        "name": "Send Message",
        "func": "//https://docs.rocket.chat/api/rest-api/methods/livechat/room\n\n//Usar id de Usuario de Telegram como TOKEN\n\n\nmsg.url = \"https://rocket.it.mindbot.com.ar/api/v1/livechat/message\"\n\nlet originalPayload = msg.payload;\n\nmsg.payload = {};\nmsg.payload.token = originalPayload.config.guest.token;\nmsg.payload.rid = originalPayload.config.room._id;\nmsg.payload.msg = msg.originalMessage.text;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2660,
        "y": 200,
        "wires": [
            [
                "fd8c9753.82cf18"
            ]
        ]
    },
    {
        "id": "f60f6e8b.26885",
        "type": "debug",
        "z": "7ee81df4.bfea84",
        "name": "Send Message",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3080,
        "y": 60,
        "wires": []
    },
    {
        "id": "4c4953ed.decb2c",
        "type": "debug",
        "z": "7ee81df4.bfea84",
        "name": "visitor EXISTS",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 140,
        "wires": []
    },
    {
        "id": "9de6f676.6b1328",
        "type": "debug",
        "z": "7ee81df4.bfea84",
        "name": "visitor NOT EXISTS",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 420,
        "wires": []
    },
    {
        "id": "3e8ca4e8.4b9dfc",
        "type": "switch",
        "z": "7ee81df4.bfea84",
        "name": "Check room exists",
        "property": "payload.config.room",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2350,
        "y": 200,
        "wires": [
            [
                "2af94aa3.5b5f46"
            ],
            [
                "98c2632b.e833a"
            ]
        ]
    },
    {
        "id": "98c2632b.e833a",
        "type": "function",
        "z": "7ee81df4.bfea84",
        "name": "Get room (crear room)",
        "func": "//https://docs.rocket.chat/api/rest-api/methods/livechat/room\n\n//Usar id de Usuario de Telegram como TOKEN\nlet token = msg.originalMessage.from.id\n\nmsg.url = \"https://rocket.it.mindbot.com.ar/api/v1/livechat/room?token=\" + token;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2380,
        "y": 320,
        "wires": [
            [
                "414289d5.96b3b8"
            ]
        ]
    },
    {
        "id": "414289d5.96b3b8",
        "type": "http request",
        "z": "7ee81df4.bfea84",
        "name": "Get room",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 2620,
        "y": 320,
        "wires": [
            [
                "1fab54c.98015ab"
            ]
        ]
    },
    {
        "id": "1fab54c.98015ab",
        "type": "json",
        "z": "7ee81df4.bfea84",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 2810,
        "y": 320,
        "wires": [
            [
                "beeafc04.2066e"
            ]
        ]
    },
    {
        "id": "beeafc04.2066e",
        "type": "function",
        "z": "7ee81df4.bfea84",
        "name": "Send Message",
        "func": "//https://docs.rocket.chat/api/rest-api/methods/livechat/room\n\n//Usar id de Usuario de Telegram como TOKEN\n\n\nmsg.url = \"https://rocket.it.mindbot.com.ar/api/v1/livechat/message\"\n\nlet originalPayload = msg.payload;\n\nmsg.payload = {};\nmsg.payload.token = originalPayload.room.v.token;\nmsg.payload.rid = originalPayload.room._id;\nmsg.payload.msg = msg.originalMessage.text;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2980,
        "y": 320,
        "wires": [
            [
                "760fa4dc.f12d5c",
                "9fd9269a.33bfc8"
            ]
        ]
    },
    {
        "id": "760fa4dc.f12d5c",
        "type": "debug",
        "z": "7ee81df4.bfea84",
        "name": "Send Message (new Room)",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3280,
        "y": 240,
        "wires": []
    },
    {
        "id": "fd8c9753.82cf18",
        "type": "http request",
        "z": "7ee81df4.bfea84",
        "name": "Send message",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "body",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 2940,
        "y": 200,
        "wires": [
            [
                "f60f6e8b.26885"
            ]
        ]
    },
    {
        "id": "9fd9269a.33bfc8",
        "type": "http request",
        "z": "7ee81df4.bfea84",
        "name": "Send message",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "body",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 3240,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "a813910b.42014",
        "type": "http in",
        "z": "7ee81df4.bfea84",
        "name": "Post messages from Rocket.chat",
        "url": "/messages",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 190,
        "y": 1480,
        "wires": [
            [
                "82e65057.262e2",
                "14526157.243fef",
                "60d612db.6df9dc"
            ]
        ]
    },
    {
        "id": "82e65057.262e2",
        "type": "debug",
        "z": "7ee81df4.bfea84",
        "name": "Rocket.chat receiver",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 1200,
        "wires": []
    },
    {
        "id": "3a9529df.ce3346",
        "type": "function",
        "z": "7ee81df4.bfea84",
        "name": "Set message",
        "func": "//Respuesta a Telegram\n//chatId: 869282068\n//messageId: 1938\n//type: \"message\"\n//content: \"hola\"\n\nmsg.payload.chatId = msg.payload.visitor.token;\nmsg.payload.type = \"message\";\nmsg.payload.content = msg.payload.messages[0].msg;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1110,
        "y": 1360,
        "wires": [
            [
                "e78ac438.3320e8",
                "15478edd.b70101",
                "1c0df8fe.451227"
            ]
        ]
    },
    {
        "id": "15478edd.b70101",
        "type": "http response",
        "z": "7ee81df4.bfea84",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1400,
        "y": 1420,
        "wires": []
    },
    {
        "id": "23cef9dc.463986",
        "type": "comment",
        "z": "7ee81df4.bfea84",
        "name": "WebHook - Omnichannel",
        "info": "Todos los mensajes salientes de los operadores, seran reenviados aca.\nHay que identificar el CANAL (si es que tiene) y derivarlo correctamente.\n\n**TODO**: Adicionalmente, se generan otros mensajes, como cambio de departamento, o cierre de caso, que debemos procesar correctamente.",
        "x": 170,
        "y": 1520,
        "wires": []
    },
    {
        "id": "e6c9b776.ae6b68",
        "type": "switch",
        "z": "7ee81df4.bfea84",
        "name": "Switch canal",
        "property": "payload.visitor.customFields.chanel",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "telegram",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "whatsapp",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 730,
        "y": 1480,
        "wires": [
            [
                "3a9529df.ce3346"
            ],
            [
                "8bfe58f7.33d068"
            ],
            [
                "6b5f84ff.2ec08c"
            ]
        ]
    },
    {
        "id": "6b5f84ff.2ec08c",
        "type": "debug",
        "z": "7ee81df4.bfea84",
        "name": "WebHook SIN procesar",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 1580,
        "wires": []
    },
    {
        "id": "c40adad0.7fef58",
        "type": "comment",
        "z": "7ee81df4.bfea84",
        "name": "TODO: Check ROOM or DEPARTMENT???",
        "info": "",
        "x": 2510,
        "y": 140,
        "wires": []
    },
    {
        "id": "9f55ee15.5d98a",
        "type": "http in",
        "z": "7ee81df4.bfea84",
        "name": "Webhook from whatsapp",
        "url": "/whatsapp/inbound",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 130,
        "y": 780,
        "wires": [
            [
                "62fe07d7.edbfd8",
                "792d7f15.1913a",
                "230558cb.e84f88"
            ]
        ]
    },
    {
        "id": "62fe07d7.edbfd8",
        "type": "debug",
        "z": "7ee81df4.bfea84",
        "name": "Whatsapp receiver",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 700,
        "wires": []
    },
    {
        "id": "792d7f15.1913a",
        "type": "http response",
        "z": "7ee81df4.bfea84",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 320,
        "y": 980,
        "wires": []
    },
    {
        "id": "426449b7.49f8b8",
        "type": "http request",
        "z": "7ee81df4.bfea84",
        "name": "New visitor",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1410,
        "y": 940,
        "wires": [
            [
                "56dfe2c5.cc323c",
                "176966ef.dae549"
            ]
        ]
    },
    {
        "id": "a14f41cc.7bee1",
        "type": "function",
        "z": "7ee81df4.bfea84",
        "name": "New visitor Payload",
        "func": "//https://docs.rocket.chat/api/rest-api/methods/livechat/visitor#payload\n\n//Obtener datos de Telegram\nlet fullName = msg.originalMessage.results[0].contact.name;\n\n//Usar nro de telefono de WhatsApp - lo espera en String\nlet token = msg.originalMessage.results[0].from;\n\nlet visitor = {};\n\nvisitor.name = fullName;\nvisitor.token = token;\nvisitor.customFields = [];\n\n//Custom Field para informar el CANAL\nlet phone = token;\n\nvisitor.customFields.push({key:\"chanel\", value:\"whatsapp\", overwrite:true});\n//TODO: Agregar dato de BOT vs de Agente (customFields)\nvisitor.customFields.push({key:\"phone\", value:token, overwrite:true});\n\nmsg.payload = {};\nmsg.payload.visitor = visitor;\n\nif (msg.log.origin === undefined) {\n    msg.log.origin =  token;\n}\n//https://rocket.it.mindbot.com.ar/api/v1/livechat/visitor\n\nlet ssl = global.get(\"rocketChat_SSL\") == \"true\" ? \"https://\" : \"http://\";\nmsg.url = ssl + global.get(\"rocketChat_Url\") + \"/api/v1/livechat/visitor/\";\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1150,
        "y": 940,
        "wires": [
            [
                "e7cf9009.e204",
                "426449b7.49f8b8"
            ]
        ]
    },
    {
        "id": "e7cf9009.e204",
        "type": "debug",
        "z": "7ee81df4.bfea84",
        "name": "New visitor Payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 880,
        "wires": []
    },
    {
        "id": "230558cb.e84f88",
        "type": "function",
        "z": "7ee81df4.bfea84",
        "name": "Get visitor data Payload",
        "func": "//https://docs.rocket.chat/api/rest-api/methods/livechat/visitor#payload\n\n\n//Usar nro de telefono de WhatsApp como TOKEN\n//Guardo el mensaje original\nlet originalMessage = msg.payload;\nmsg.originalMessage = originalMessage;\n\nlet token = msg.originalMessage.results[0].from;\n\n//msg.url = \"https://rocket.it.mindbot.com.ar/api/v1/livechat/visitor/\" + token;\n\nlet ssl = global.get(\"rocketChat_SSL\") == \"true\" ? \"https://\" : \"http://\";\nmsg.url = ssl + global.get(\"rocketChat_Url\") + \"/api/livechat/visitor/\" + token;\n\n\nmsg.log = {};\nmsg.log.origin =  msg.originalMessage.results[0].from;\nmsg.log.destination = msg.payload.results[0].integrationType;\nmsg.log.action = \"Live Chat\"\nmsg.log.payload = JSON.stringify(msg.payload.results[0].message.text);\nmsg.log.url = msg.req.originalUrl;\nmsg.log.statusCode = msg.req.statusCode;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 470,
        "y": 780,
        "wires": [
            [
                "29f0e9db.4a95f6"
            ]
        ]
    },
    {
        "id": "29f0e9db.4a95f6",
        "type": "http request",
        "z": "7ee81df4.bfea84",
        "name": "Get visitor data",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 740,
        "y": 780,
        "wires": [
            [
                "1dbe982f.7899f8",
                "dabd246d.c50d88"
            ]
        ]
    },
    {
        "id": "1dbe982f.7899f8",
        "type": "debug",
        "z": "7ee81df4.bfea84",
        "name": "Get visitor data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 700,
        "wires": []
    },
    {
        "id": "56dfe2c5.cc323c",
        "type": "debug",
        "z": "7ee81df4.bfea84",
        "name": "New visitor Response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1640,
        "y": 880,
        "wires": []
    },
    {
        "id": "baad55e3.dd67f8",
        "type": "comment",
        "z": "7ee81df4.bfea84",
        "name": "Example response",
        "info": "{\"visitor\":{\"_id\":\"5NeTKRb5YzZ4wE3Mi\",\"username\":\"guest-6\",\"ts\":\"2021-01-19T12:26:32.789Z\",\"ip\":\"192.168.1.1\",\"host\":\"rocket.it.mindbot.com.ar\",\"_updatedAt\":\"2021-01-19T12:26:32.791Z\",\"name\":\"Andres Petrillo\",\"token\":\"869282068\"},\"success\":true}\n\n{\"visitor\":{\"_id\":\"5NeTKRb5YzZ4wE3Mi\",\"username\":\"guest-6\",\"ts\":\"2021-01-19T12:26:32.789Z\",\"ip\":\"192.168.1.1\",\"host\":\"rocket.it.mindbot.com.ar\",\"_updatedAt\":\"2021-01-19T12:26:32.791Z\",\"name\":\"Andres Petrillo\",\"token\":\"869282068\"},\"success\":true}",
        "x": 870,
        "y": 880,
        "wires": []
    },
    {
        "id": "dabd246d.c50d88",
        "type": "switch",
        "z": "7ee81df4.bfea84",
        "name": "Check visitor exists",
        "property": "payload.visitor",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1070,
        "y": 780,
        "wires": [
            [
                "54b021e6.d83d7",
                "176966ef.dae549"
            ],
            [
                "a14f41cc.7bee1",
                "7d0bfcff.af0944"
            ]
        ]
    },
    {
        "id": "176966ef.dae549",
        "type": "function",
        "z": "7ee81df4.bfea84",
        "name": "Get config (Obtengo room)",
        "func": "//https://docs.rocket.chat/api/rest-api/methods/livechat/room\n\n//Usar nro de telefono de Wahtsapp\nlet token = msg.originalMessage.results[0].from;\n\n//msg.url = \"https://rocket.it.mindbot.com.ar/api/v1/livechat/config?token=\" + token;\n\nlet ssl = global.get(\"rocketChat_SSL\") == \"true\" ? \"https://\" : \"http://\";\nmsg.url = ssl + global.get(\"rocketChat_Url\") + \"/api/v1/livechat/config?token=\" + token;\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1620,
        "y": 780,
        "wires": [
            [
                "9e119b.93cdce68"
            ]
        ]
    },
    {
        "id": "9e119b.93cdce68",
        "type": "http request",
        "z": "7ee81df4.bfea84",
        "name": "Get config",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1870,
        "y": 780,
        "wires": [
            [
                "229e7882.3652a8"
            ]
        ]
    },
    {
        "id": "229e7882.3652a8",
        "type": "json",
        "z": "7ee81df4.bfea84",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 2050,
        "y": 780,
        "wires": [
            [
                "d4a778ed.12b818",
                "49d87cc1.7d91b4"
            ]
        ]
    },
    {
        "id": "d4a778ed.12b818",
        "type": "debug",
        "z": "7ee81df4.bfea84",
        "name": "to json",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2350,
        "y": 640,
        "wires": []
    },
    {
        "id": "f18bd20f.73c6c",
        "type": "function",
        "z": "7ee81df4.bfea84",
        "name": "Send Message",
        "func": "//https://docs.rocket.chat/api/rest-api/methods/livechat/room\n\n//Usar id de Usuario de Telegram como TOKEN\n\n//msg.url = \"https://rocket.it.mindbot.com.ar/api/v1/livechat/message\"\n\nlet ssl = global.get(\"rocketChat_SSL\") == \"true\" ? \"https://\" : \"http://\";\nmsg.url = ssl + global.get(\"rocketChat_Url\") + \"/api/v1/livechat/message\";\n\n\nlet originalPayload = msg.payload;\n\nmsg.payload = {};\nmsg.payload.token = originalPayload.config.guest.token;\nmsg.payload.rid = originalPayload.config.room._id;\nmsg.payload.msg = msg.originalMessage.results[0].message.text;\n\n\n//log\nmsg.log.integrationUrl = msg.url;\nmsg.log.integrationStatusCode = msg.statusCode; \nmsg.log.integrationPayload = JSON.stringify(msg.payload);\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2580,
        "y": 780,
        "wires": [
            [
                "3907b8a4.e28e88",
                "ae150c49.17bdc"
            ]
        ]
    },
    {
        "id": "562dd6e6.acaf78",
        "type": "debug",
        "z": "7ee81df4.bfea84",
        "name": "Send Message",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3000,
        "y": 640,
        "wires": []
    },
    {
        "id": "54b021e6.d83d7",
        "type": "debug",
        "z": "7ee81df4.bfea84",
        "name": "visitor EXISTS",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 720,
        "wires": []
    },
    {
        "id": "7d0bfcff.af0944",
        "type": "debug",
        "z": "7ee81df4.bfea84",
        "name": "visitor NOT EXISTS",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 1000,
        "wires": []
    },
    {
        "id": "49d87cc1.7d91b4",
        "type": "switch",
        "z": "7ee81df4.bfea84",
        "name": "Check room exists",
        "property": "payload.config.room",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2270,
        "y": 780,
        "wires": [
            [
                "f18bd20f.73c6c"
            ],
            [
                "8f25fb78.5d9c68"
            ]
        ]
    },
    {
        "id": "8f25fb78.5d9c68",
        "type": "function",
        "z": "7ee81df4.bfea84",
        "name": "Get room (crear room)",
        "func": "//https://docs.rocket.chat/api/rest-api/methods/livechat/room\n\n//Usar telefono de WhatsApp como TOKEN\nlet token = msg.originalMessage.results[0].from;\n\n//msg.url = \"https://rocket.it.mindbot.com.ar/api/v1/livechat/room?token=\" + token;\n\nlet ssl = global.get(\"rocketChat_SSL\") == \"true\" ? \"https://\" : \"http://\";\nmsg.url = ssl + global.get(\"rocketChat_Url\") + \"/api/v1/livechat/room?token=\" + token;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2300,
        "y": 900,
        "wires": [
            [
                "52f1b528.c5b1cc"
            ]
        ]
    },
    {
        "id": "52f1b528.c5b1cc",
        "type": "http request",
        "z": "7ee81df4.bfea84",
        "name": "Get room",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 2540,
        "y": 900,
        "wires": [
            [
                "8c284ea4.6cb3b",
                "236503ab.0aacfc"
            ]
        ]
    },
    {
        "id": "8c284ea4.6cb3b",
        "type": "json",
        "z": "7ee81df4.bfea84",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 2730,
        "y": 900,
        "wires": [
            [
                "32a393d9.c16a9c"
            ]
        ]
    },
    {
        "id": "32a393d9.c16a9c",
        "type": "function",
        "z": "7ee81df4.bfea84",
        "name": "Send Message",
        "func": "//https://docs.rocket.chat/api/rest-api/methods/livechat/room\n\n//Usar id de Usuario de Telegram como TOKEN\n\n//msg.url = \"https://rocket.it.mindbot.com.ar/api/v1/livechat/message\"\n\nlet ssl = global.get(\"rocketChat_SSL\") == \"true\" ? \"https://\" : \"http://\";\nmsg.url = ssl + global.get(\"rocketChat_Url\") + \"/api/v1/livechat/message\";\n\nlet originalPayload = msg.payload;\n\nmsg.payload = {};\nmsg.payload.token = originalPayload.room.v.token;\nmsg.payload.rid = originalPayload.room._id;\nmsg.payload.msg = msg.originalMessage.results[0].message.text;\n\n\n//log\nmsg.log.integrationUrl = msg.url;\nmsg.log.integrationStatusCode = msg.statusCode; \nmsg.log.integrationPayload = JSON.stringify(msg.payload);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2900,
        "y": 900,
        "wires": [
            [
                "59a9d5ce.eb061c",
                "7b92ba36.fe3b44",
                "ae150c49.17bdc"
            ]
        ]
    },
    {
        "id": "59a9d5ce.eb061c",
        "type": "debug",
        "z": "7ee81df4.bfea84",
        "name": "Send Message (new Room)",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3200,
        "y": 820,
        "wires": []
    },
    {
        "id": "3907b8a4.e28e88",
        "type": "http request",
        "z": "7ee81df4.bfea84",
        "name": "Send message",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "body",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 2860,
        "y": 780,
        "wires": [
            [
                "562dd6e6.acaf78"
            ]
        ]
    },
    {
        "id": "7b92ba36.fe3b44",
        "type": "http request",
        "z": "7ee81df4.bfea84",
        "name": "Send message",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "body",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 3160,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "d2432921.d9d298",
        "type": "comment",
        "z": "7ee81df4.bfea84",
        "name": "TODO: Check ROOM or DEPARTMENT???",
        "info": "",
        "x": 2430,
        "y": 720,
        "wires": []
    },
    {
        "id": "8bfe58f7.33d068",
        "type": "function",
        "z": "7ee81df4.bfea84",
        "name": "Set message",
        "func": "//Respuesta a Whatsapp\n//chatId: 869282068\n//messageId: 1938\n//type: \"message\"\n//content: \"hola\"\nmsg.headers = {};\n\nmsg.headers['Authorization'] = \"App \" + global.get(\"infobip_token\");\nmsg.headers['Content-Type'] = \"application/json\";\nmsg.headers['Accept'] = \"application/json\";\n \nmsg.payload.scenarioKey = global.get(\"infobip_scenario\");\nmsg.payload.destinations = [];\nmsg.payload.whatsApp = {};\n\nlet destination = {};\nlet to= {};\n\n//Nro de telefono del cliente\nto.phoneNumber = msg.payload.visitor.token;\ndestination.to = to;\n\nmsg.payload.destinations.push(destination);\n\nlet text = msg.payload.messages[0].msg || \"Ver archivo adjunto\";\n\nmsg.payload.whatsApp.text =text ;\n\n//Si tiene attachment\nif(msg.payload.messages[0].fileUpload) {\n    //TODO: Revisar tipo de mensaje\n    \n    if (msg.payload.messages[0].fileUpload.type.toLowerCase().includes(\"image\")) {\n        msg.payload.whatsApp.imageUrl = msg.payload.messages[0].fileUpload.publicFilePath;\n    }\n    \n    if (msg.payload.messages[0].fileUpload.type.toLowerCase().includes(\"application\")) {\n        msg.payload.whatsApp.fileUrl = msg.payload.messages[0].fileUpload.publicFilePath;\n    }\n}\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1110,
        "y": 1480,
        "wires": [
            [
                "d4471d75.eba42",
                "9289a7ad.1e2618",
                "1c0df8fe.451227"
            ]
        ]
    },
    {
        "id": "60d612db.6df9dc",
        "type": "http response",
        "z": "7ee81df4.bfea84",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 460,
        "y": 1580,
        "wires": []
    },
    {
        "id": "236503ab.0aacfc",
        "type": "debug",
        "z": "7ee81df4.bfea84",
        "name": "Get room",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2700,
        "y": 980,
        "wires": []
    },
    {
        "id": "d4471d75.eba42",
        "type": "debug",
        "z": "7ee81df4.bfea84",
        "name": "Whatsapp Message",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 1640,
        "wires": []
    },
    {
        "id": "9289a7ad.1e2618",
        "type": "http request",
        "z": "7ee81df4.bfea84",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://mp9856.api.infobip.com/omni/1/advanced",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1430,
        "y": 1480,
        "wires": [
            [
                "9e9b55d3.fcdd78"
            ]
        ]
    },
    {
        "id": "9e9b55d3.fcdd78",
        "type": "debug",
        "z": "7ee81df4.bfea84",
        "name": "Infobip Send Advanced",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1670,
        "y": 1480,
        "wires": []
    },
    {
        "id": "66fe2f7b.a21dd",
        "type": "http in",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "url": "/car/brand/:brandName",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 100,
        "wires": [
            [
                "cd412cd6.d883",
                "7c91ca0f.0ff924"
            ]
        ]
    },
    {
        "id": "47bf6c1.9169a94",
        "type": "http request",
        "z": "7ee549ef.0fbb28",
        "name": "PSeguros - Marcas",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 510,
        "y": 240,
        "wires": [
            [
                "ef867495.5b0568",
                "8ef60da5.20b09"
            ]
        ]
    },
    {
        "id": "b32cf65f.ced7b8",
        "type": "debug",
        "z": "7ee549ef.0fbb28",
        "name": "PSeguros - brands",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 320,
        "wires": []
    },
    {
        "id": "836bf80b.747198",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "PSeguros - Marcas",
        "func": "//Primero guardo marca que busco\nmsg.searchCriteria = msg.req.params.brandName; \n\n\nif (msg.searchCriteria == \"citroën\"){\n    msg.searchCriteria = msg.searchCriteria.replace(\"ë\", \"e\")\n}\n\nmsg.url = global.get(\"psegurosCotizacion_Url\") + \"valores/marcas/4/04100?apikey=\" + global.get(\"psegurosApiKey\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 280,
        "y": 240,
        "wires": [
            [
                "47bf6c1.9169a94",
                "1e69d6bf.aefc39"
            ]
        ]
    },
    {
        "id": "cd412cd6.d883",
        "type": "debug",
        "z": "7ee549ef.0fbb28",
        "name": "Car/Brand",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 80,
        "wires": []
    },
    {
        "id": "af4b0342.00155",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "function Response",
        "func": "let response = msg.results[0];\n\nmsg.payload = response;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 960,
        "y": 240,
        "wires": [
            [
                "8e7b71c6.29843"
            ]
        ]
    },
    {
        "id": "8e7b71c6.29843",
        "type": "http response",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1190,
        "y": 140,
        "wires": []
    },
    {
        "id": "603fcb43.3f0794",
        "type": "http in",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "url": "/car/model/",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 500,
        "wires": [
            [
                "c7925d5e.b2c4e",
                "e9b1bab8.be9688"
            ]
        ]
    },
    {
        "id": "c7925d5e.b2c4e",
        "type": "debug",
        "z": "7ee549ef.0fbb28",
        "name": "Car/Model",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 460,
        "wires": []
    },
    {
        "id": "d5f623bc.09378",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "PSeguros - Modelo",
        "func": "//Primero guardo modelo que busco\nmsg.searchCriteria = msg.payload.model; \n\n\n// fixes: input de usuario para que de match el servicio de modelos\n// en caso exepcional\nconst regexpPeugeot = /^[0-9][0]{2}[0-9]$/;\nconst regexpCitroen = /([A-Za-z?][0-9?]){1}\\b/;\nconst regexpBenz = /([A-Za-z]+)([0-9].*)/;\n\n\n//Solo para test, en produccion estan bien\n//if (regexpPeugeot.test(msg.searchCriteria)){\n//    msg.searchCriteria = msg.searchCriteria.replace(\"00\", \"OO\");\n//}\n\n\n// es indistitno si user aclara si el C4 es lougne o picassa \n// el algoritmo sobre el servicio da el mismo resultado\n// solo separamos la letra del numero para q pueda consulta el servicio\nif (msg.payload.brand == \"CTR\" && regexpCitroen.test(msg.searchCriteria)){\n    msg.searchCriteria = msg.searchCriteria.slice(0,1) + \" \" + msg.searchCriteria.slice(1,2);\n}\n\nif (msg.payload.brand == \"MEB\" && regexpBenz.test(msg.searchCriteria)){\n    modelPart1 = msg.searchCriteria.match(/[A-Za-z]+/);\n    modelPart2 = msg.searchCriteria.match(/[0-9].*/);\n    msg.searchCriteria = modelPart1[0] + \" \" + modelPart2[0];\n    node.warn(\" modelo benz \" + msg.searchCriteria)\n}\n\nmsg.url = global.get(\"psegurosCotizacion_Url\") + `valores/modelo/4/04100/${msg.payload.brand}/${msg.payload.year}/${msg.payload.new}?apikey=` + global.get(\"psegurosApiKey\");\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 290,
        "y": 640,
        "wires": [
            [
                "75b05f2f.efc48"
            ]
        ]
    },
    {
        "id": "8b524e35.de3c7",
        "type": "debug",
        "z": "7ee549ef.0fbb28",
        "name": "model",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 460,
        "wires": []
    },
    {
        "id": "75b05f2f.efc48",
        "type": "http request",
        "z": "7ee549ef.0fbb28",
        "name": "PSeguros - Modelos",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 620,
        "y": 640,
        "wires": [
            [
                "8b524e35.de3c7",
                "764e2a97.a29284"
            ]
        ]
    },
    {
        "id": "ab3a6e0d.08228",
        "type": "http response",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1330,
        "y": 500,
        "wires": []
    },
    {
        "id": "f90bbab4.8648b8",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "function Response",
        "func": "let response = msg.results;\n\n\n//item.modeloFiltered.descripcion.slice(0,-9)\nif (response && response.length > 0) {\n    \n    node.warn('Filter infoauto code: ' + response)\n    \n    response.forEach(item =>{\n            // SE VA ENVIAR CON CODIGO INFO BIP, SE ATAJA EN FRONT OCULTAR INFOBIP - ESTEBAN 14-04 \n             var str = item.modeloFiltered.descripcion; \n            \n            //  //Remover codigo infoauto\n            var n = str.indexOf(\"(\");\n            item.modeloFiltered.descripcion = item.modeloFiltered.descripcion.slice(0,n);\n        \n    });\n    \n    //En algunos casos excepcionales, puede traer varios modelos sin filtro, es necesario definir un maximo (50)\n    if (response.length > 50) {\n        node.warn('More than 50 results: ' + response.lenght);\n        response = response.slice(0,49);\n    }\n        \n}\n\n\n\nmsg.payload = response;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1090,
        "y": 640,
        "wires": [
            [
                "ab3a6e0d.08228",
                "20f274a.837d28c",
                "218e7dbe.bb3252"
            ]
        ]
    },
    {
        "id": "84bcab1e.218388",
        "type": "http in",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "url": "/quotation",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 1060,
        "wires": [
            [
                "bf1e0de8.73f14",
                "32ed8f25.6e21a"
            ]
        ]
    },
    {
        "id": "8d1f8743.53ca18",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "PSeguros - Cotizacion",
        "func": "msg.originalPayload = msg.payload;\n\nmsg.url = global.get(\"psegurosCotizacion_Url\") + `cotizar?apikey=` + global.get(\"psegurosApiKey\");\n\nmsg.log = {};\n\nlet bodyCotizacion = {};\n\nlet year = msg.payload.year;\nlet newCar = msg.payload.new;\nlet brand = msg.payload.brand;\nlet model = msg.payload.model;\nlet zipcode = msg.payload.zipcode;\nlet gender = msg.payload.gender;\nlet province = msg.payload.province;\nlet cardEntity = msg.payload.cardEntity;\n\nbodyCotizacion.bien = {};\nbodyCotizacion.bien[\"40012_anio\"] = year;\nbodyCotizacion.bien[\"40013_es0km\"] = newCar;\nbodyCotizacion.bien[\"40020_marca\"] = brand;\nbodyCotizacion.bien[\"40021_modelo\"] = model;\nbodyCotizacion.bien[\"900008_codPostal\"] = zipcode;\nbodyCotizacion.bien[\"40086_genero\"] = gender;\nbodyCotizacion.bien[\"40008_Uso\"] = \"1\";\nbodyCotizacion.bien[\"40105_Cuil_Beneficiario_Art\"] = \"\";\nbodyCotizacion.bien.montoAccesorios = \"0\"; // por ahora hardcode\n\nbodyCotizacion.ramoProducto = {};\nbodyCotizacion.ramoProducto.ramo = \"4\";\nbodyCotizacion.ramoProducto.producto = \"04100\";\n\nbodyCotizacion.datosGenerales = {};\nbodyCotizacion.datosGenerales.codProductor = \"15925\";\nbodyCotizacion.datosGenerales.provincia = province;\nbodyCotizacion.datosGenerales.tipoPersona = \"F\";  // unico valor aceptable (persona fisica)\nbodyCotizacion.datosGenerales.medioDePago = \"2\";\nbodyCotizacion.datosGenerales.origenDePago = cardEntity ? cardEntity : \"VISO\";\nbodyCotizacion.datosGenerales.condicionIva = \"CF\";  // unico valor aceptable (consumidor final)\nbodyCotizacion.datosGenerales.cuit = \"\";\nbodyCotizacion.datosGenerales.vigencia = \"E\";\nbodyCotizacion.datosGenerales.vigenciaTecnica = \"A\";\nbodyCotizacion.datosGenerales.tipoFacturacion = \"F\";\nbodyCotizacion.datosGenerales.moneda = \"01\";\nbodyCotizacion.datosGenerales.planDePago = \"1\";\nbodyCotizacion.datosGenerales.modoDeCalculo = \"N\";\n\nbodyCotizacion.promociones = [{promocion : \"COTFIN2\"}, {promocion : \"CLIFIN\"}, {promocion : \"NOAP\"}];\n\nmsg.year = year; // se guarda el año para saber que planes corresponden mostrar\n\nmsg.integrationPayload = msg.payload;\nmsg.payload = bodyCotizacion;\n\nmsg.log.payload = JSON.stringify(bodyCotizacion);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 280,
        "y": 1200,
        "wires": [
            [
                "64a30bba.f6b394"
            ]
        ]
    },
    {
        "id": "c13be3c5.cfa1e",
        "type": "http response",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 3610,
        "y": 1280,
        "wires": []
    },
    {
        "id": "64a30bba.f6b394",
        "type": "http request",
        "z": "7ee549ef.0fbb28",
        "name": "PSeguros - Cotizacion",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 600,
        "y": 1200,
        "wires": [
            [
                "777e7ab9.a18114",
                "d0e74ef4.b0846"
            ]
        ]
    },
    {
        "id": "f5665931.d4a3b8",
        "type": "inject",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "TEST!",
        "payloadType": "str",
        "x": 1550,
        "y": 640,
        "wires": [
            [
                "c2e9e61e.d28558"
            ]
        ]
    },
    {
        "id": "c2e9e61e.d28558",
        "type": "function-npm",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "func": "const {distance, closest} = require('fastest-levenshtein');\n\nmsg.payload = {};\n\ntry {\n    // Print levenshtein-distance between 'fast' and 'faster' \nmsg.payload.distance = distance('fast', 'faster');\n//=> 2\n\n// Print string from array with lowest edit-distance to 'fast'\nmsg.payload.closest = closest('FIESTA TITANIUM', ['FIESTA  1.6 4P S              (KD) (018594)', 'FIESTA  1.6 4P TITANIUM       (KD) (018598)']);\n\n}catch (exception) {\n    node.error(\"Error\", exception)\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1760,
        "y": 640,
        "wires": [
            [
                "18b222a1.7b5e2d"
            ]
        ]
    },
    {
        "id": "18b222a1.7b5e2d",
        "type": "debug",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1940,
        "y": 640,
        "wires": []
    },
    {
        "id": "764e2a97.a29284",
        "type": "function-npm",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "func": "const {distance, closest} = require('fastest-levenshtein');\n\ntry {\n    // Print levenshtein-distance between 'fast' and 'faster' \n    //msg.payload.distance = distance('fast', 'faster');\n    //=> 2\n\n    // Print string from array with lowest edit-distance to 'fast'\n    //msg.payload.closest = closest('FIESTA TITANIUM', ['FIESTA  1.6 4P S              (KD) (018594)', 'FIESTA  1.6 4P TITANIUM       (KD) (018598)']);\n    \n    var modelos = msg.payload;\n    \n     \n    var searchCriteriaPrincipal = msg.searchCriteria.split(\" \")[0];\n    var searchCriteria = msg.searchCriteria.toLowerCase();\n    var preResults = [];\n    var results = [];\n\n    node.warn([\"modelo 1\"]);\n    \n    modelos.forEach(modelo => {\n      if (modelo.descripcion.toLowerCase().includes(searchCriteriaPrincipal.toLowerCase()))\n            preResults.push(modelo);\n    }) \n    \n    node.warn([\"modelo 2\"]);\n    \n    preResults.forEach(modeloFiltered => {\n        let dist = distance(searchCriteria, modeloFiltered.descripcion.replace(/ /g, ''));\n        results.push({dist, modeloFiltered});\n        \n    })\n    \n    node.warn([\"modelo 3\"]);\n    \n    msg.searchCriteriaPrincipal = searchCriteriaPrincipal;\n    msg.preresults = preResults;\n    \n    //Algoritmo para ordenar\n    msg.results = results.sort((a,b) => (a.dist > b.dist) ? 1 : ((b.dist > a.dist) ? -1 : 0));\n\nreturn msg;\n    \n\n}catch (exception) {\n    node.error(\"Error\", exception)\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 870,
        "y": 640,
        "wires": [
            [
                "f90bbab4.8648b8"
            ]
        ]
    },
    {
        "id": "777e7ab9.a18114",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "response",
        "func": "//Armo LOG\n\nmsg.log.integrationStatusCode = msg.statusCode;\nmsg.log.integrationPayload = JSON.stringify(msg.integrationPayload); // este el response\nmsg.log.response = JSON.stringify(msg.payload);\nmsg.log.integrationUrl = msg.url;\n\nvar year = msg.year;\n//Obtengo la diferencia de años\nvar yearDiff = new Date().getFullYear() - year;\n\n\nif (msg.payload.code === 404) {\n    msg.payload = msg.payload.message\n} else if (msg.payload.code == 500) { \n    msg.payload = \"Error servicio NO disponible\";\n} else {\n    var info ={\n        \"numeroCotizacion\" : msg.payload.numeroCotizacion,\n        \"sumaAsegurada\" : msg.payload.bienesCotizados[0].sumaAsegurada,\n        \"planes\" : []\n    };\n    //Obtengo todos los planes\n    var planes = msg.payload.planes;\n    \n    node.warn([\"yearDiff\", yearDiff]);\n    \n    // pusheo los planes que corresponden segun la antiguedad\n    if (yearDiff <= 10){\n        \n        if (planes.filter(plan => plan.plan == \"22\").length != 0) {\n            node.warn([\"plan_22\", planes.filter(plan => plan.plan == \"22\")]);\n             info.planes.push(planes.filter(plan => plan.plan == \"22\")[0]);\n        }\n            \n        \n        if (planes.filter(plan => plan.plan == \"50\").length != 0) {\n            node.warn([\"plan_50\", planes.filter(plan => plan.plan == \"50\")]);\n            info.planes.push(planes.filter(plan => plan.plan == \"50\")[0]);\n        }\n        \n        if (planes.filter(plan => plan.plan == \"41\").length != 0) {\n            node.warn([\"plan_41\", planes.filter(plan => plan.plan == \"41\")]);\n            info.planes.push(planes.filter(plan => plan.plan == \"41\")[0]);\n        }\n        // info.planes.push(planes.filter(plan => plan.plan == \"42\")[0]);\n        // info.planes.push(planes.filter(plan => plan.plan == \"43\")[0]);\n\n    } else if (yearDiff >= 11 && yearDiff <= 14 ) {\n        \n        if (planes.filter(plan => plan.plan == \"1\").length != 0)\n            info.planes.push(planes.filter(plan => plan.plan == \"1\")[0]);\n        \n        if (planes.filter(plan => plan.plan == \"2\").length != 0)\n            info.planes.push(planes.filter(plan => plan.plan == \"2\")[0]);\n        \n        if (planes.filter(plan => plan.plan == \"8\").length != 0)\n            info.planes.push(planes.filter(plan => plan.plan == \"8\")[0]);\n            \n    } else if (yearDiff >= 15 && yearDiff <=20){\n        \n        if (planes.filter(plan => plan.plan == \"1\").length != 0)\n            info.planes.push(planes.filter(plan => plan.plan == \"1\")[0]);\n        \n        if (planes.filter(plan => plan.plan == \"4\").length != 0)\n            info.planes.push(planes.filter(plan => plan.plan == \"4\")[0]);\n        \n        if (planes.filter(plan => plan.plan == \"7\").length != 0)\n            info.planes.push(planes.filter(plan => plan.plan == \"7\")[0]);\n    } else if (yearDiff > 20 ) {\n         info.planes.push(\"No contamos con planes disponibles para la antigüedad de su vehículo\")\n    } else {\n        info.planes.push(\"sorry, something went grong\")\n    }\n    \n    node.warn([\"planes\", info.planes]);\n    \n    //Agregar disclaimer y terms\n    info.disclaimer = \"La información que otorgo en virtud de la presente operacion informatica, implica la prestacion del consentimiento o dispuesto por la ley 25.326. Conozco que podrá ejercer los derechos de acceso, rectificación y supresión de datos y acepto que la información que otorgo podrá ser utilizada para acciones de marketing en forma directa o a través de terceros. La información sera archivada por Provincia Seguros SA con domicilio en Carlos Pellegrini 71 Ciudad Autónoma de Buenos Aires\";\n    info.terms = \"Pólizas emitidas por Provincia Seguros SA consulta por las coberturas, sus limites y condiciones de suscripción en www.provinciaseguros.com.ar, Provincia Seguros SA, Carlos Pellegrini 71, CABA, CUIT 30-52750816-5, Superintendencia de Seguros de la Nacion www.ssn.gob.ar 0800-666-8400 - N° de inscripción SSN:499\";\n    \n    \n    //Agregar coberturas/caracteristicas\n    //Plan 1\n    let plan_1 = info.planes.filter(plan => plan.plan == \"1\")[0];\n    if (plan_1 != null) {\n        plan_1.coberturas = [];\n        plan_1.coberturas.push(\"RESPONSABILIDAD CIVIL CON LIMITE\");\n        plan_1.coberturas.push(\"ADICIONALES Y SERVICIOS\");\n        plan_1.coberturas.push(\"ACCIDENTES PERSONALES\");\n        plan_1.coberturas.push(\"RESP. CIVIL CON LIMITE MERCOSUR\");\n        plan_1.coberturas.push(\"LESIONES O MUERTE POR TERCERO - MERCOSUR\");\n        plan_1.coberturas.push(\"DAÑOS MATERIALES POR TERCERO - MERCOSUR\");\n        plan_1.coberturas.push(\"LESIONES O MUERTE POR EVENTO - MERCOSUR\");\n        plan_1.coberturas.push(\"DAÑOS MATERIALES POR EVENTO - MERCOSUR\");\n        plan_1.coberturas.push(\"ROBO TOTAL\");\n        plan_1.coberturas.push(\"ROBO CONTENIDO\");\n        plan_1.coberturas.push(\"INCENDIO TOTAL\");\n        plan_1.coberturas.push(\"DESTRUCCION TOTAL POR ACCIDENTE\");\n        plan_1.coberturas.push(\"ACCESORIOS PLAN 1\");\n        plan_1.coberturas.push(\"ACCESORIOS ROBO TOTAL\");\n        plan_1.coberturas.push(\"ACCESORIOS DAÑO TOTAL\");\n        plan_1.coberturas.push(\"ACCESORIOS INCENDIO TOTAL\");\n    }\n    \n    //Plan 2\n    let plan_2 = info.planes.filter(plan => plan.plan == \"2\")[0];\n    if (plan_2 != null) {\n        plan_2.coberturas = [];\n        plan_2.coberturas.push(\"RESPONSABILIDAD CIVIL CON LIMITE\");\n        plan_2.coberturas.push(\"ADICIONALES Y SERVICIOS\");\n        plan_2.coberturas.push(\"ACCIDENTES PERSONALES\");\n        plan_2.coberturas.push(\"RESP. CIVIL CON LIMITE MERCOSUR\");\n        plan_2.coberturas.push(\"LESIONES O MUERTE POR TERCERO - MERCOSUR\");\n        plan_2.coberturas.push(\"DAÑOS MATERIALES POR TERCERO - MERCOSUR\");\n        plan_2.coberturas.push(\"LESIONES O MUERTE POR EVENTO - MERCOSUR\");\n        plan_2.coberturas.push(\"DAÑOS MATERIALES POR EVENTO - MERCOSUR\");\n        plan_2.coberturas.push(\"ROBO TOTAL\");\n        plan_2.coberturas.push(\"ROBO PARCIAL\");\n        plan_2.coberturas.push(\"INCENDIO TOTAL\");\n        plan_2.coberturas.push(\"INCENDIO PARCIAL\");\n        plan_2.coberturas.push(\"DESTRUCCION TOTAL POR ACCIDENTE\");\n        plan_2.coberturas.push(\"ACCESORIOS PLAN 2 / 20\");\n        plan_2.coberturas.push(\"CASCO MERCOSUR(2)\");\n        plan_2.coberturas.push(\"ACCESORIOS ROBO TOTAL\");\n        plan_2.coberturas.push(\"ACCESORIOS ROBO PARCIA\");\n        plan_2.coberturas.push(\"ACCESORIOS DAÑO TOTAL\");\n        plan_2.coberturas.push(\"ACCESORIOS DAÑO TOTAL\");\n        plan_2.coberturas.push(\"ACCESORIOS INCENDIO PARCIAL\");\n        plan_2.coberturas.push(\"ACCESORIOS INCENDIO TOTAL\");\n    }\n    \n    //Plan 4\n    let plan_4 = info.planes.filter(plan => plan.plan == \"4\")[0];\n    if (plan_4 != null) {\n        plan_4.coberturas = [];\n        plan_4.coberturas.push(\"RESPONSABILIDAD CIVIL CON LIMITE\");\n        plan_4.coberturas.push(\"ASITENCIA VEHICULO PLAN RC UNICAMENTE\");\n        plan_4.coberturas.push(\"ACCIDENTES PERSONALES\");\n        plan_4.coberturas.push(\"RESP.CIVIL-AGRAVANTE POR NO CUBRIR CASCO\");\n        plan_4.coberturas.push(\"RESP.CIVIL-DESAFECTA BNS\");\n        plan_4.coberturas.push(\"RESP.CIVIL-AGRABANTE DESAFECTA BNS\");\n        plan_4.coberturas.push(\"RESP.CIVIL-DESAFECTA BNS\");\n        plan_4.coberturas.push(\"RESP. CIVIL CON LIMITE MERCOSUR\");\n        plan_4.coberturas.push(\"LESIONES O MUERTE POR TERCERO - MERCOSUR\");\n        plan_4.coberturas.push(\"DAÑOS MATERIALES POR TERCERO - MERCOSUR\");\n        plan_4.coberturas.push(\"LESIONES O MUERTE POR EVENTO - MERCOSUR\");\n        plan_4.coberturas.push(\"DAÑOS MATERIALES POR EVENTO - MERCOSUR\");\n        \n    }\n    \n    //Plan 7\n    let plan_7 = info.planes.filter(plan => plan.plan == \"7\")[0];\n    if (plan_7 != null) {\n        plan_7.coberturas = [];\n        plan_7.coberturas.push(\"RESPONSABILIDAD CIVIL CON LIMITE\");\n        plan_7.coberturas.push(\"ACCIDENTES PERSONALES\");\n        plan_7.coberturas.push(\"RESP. CIVIL CON LIMITE MERCOSUR\");\n        plan_7.coberturas.push(\"LESIONES O MUERTE POR TERCERO - MERCOSUR\");\n        plan_7.coberturas.push(\"DAÑOS MATERIALES POR TERCERO - MERCOSUR\");\n        plan_7.coberturas.push(\"LESIONES O MUERTE POR EVENTO - MERCOSUR\");\n        plan_7.coberturas.push(\"DAÑOS MATERIALES POR EVENTO - MERCOSUR\");\n        plan_7.coberturas.push(\"ROBO TOTAL\");\n        plan_7.coberturas.push(\"ROBO CONTENIDO\");\n        plan_7.coberturas.push(\"INCENDIO TOTAL\");\n        plan_7.coberturas.push(\"ACCESORIOS PLAN 7\");\n        plan_7.coberturas.push(\"AJUSTE COMERCIAL PLAN 7\");\n        plan_7.coberturas.push(\"CASCO MERCOSUR(7)\");\n        plan_7.coberturas.push(\"ACCESORIOS ROBO TOTAL\");\n        plan_7.coberturas.push(\"ACCESORIOS INCENDIO TOTAL\");\n        \n    }\n    \n    //Plan 8\n    let plan_8 = info.planes.filter(plan => plan.plan == \"8\")[0];\n    if (plan_8 != null) {\n        plan_8.coberturas = [];\n        plan_8.coberturas.push(\"RESPONSABILIDAD CIVIL CON LIMITE\");\n        plan_8.coberturas.push(\"ADICIONALES Y SERVICIOS\");\n        plan_8.coberturas.push(\"ACCIDENTES PERSONALES\");\n        plan_8.coberturas.push(\"RESP. CIVIL CON LIMITE MERCOSUR\");\n        plan_8.coberturas.push(\"LESIONES O MUERTE POR TERCERO - MERCOSUR\");\n        plan_8.coberturas.push(\"DAÑOS MATERIALES POR TERCERO - MERCOSUR\");\n        plan_8.coberturas.push(\"LESIONES O MUERTE POR EVENTO - MERCOSUR\");\n        plan_8.coberturas.push(\"DAÑOS MATERIALES POR EVENTO - MERCOSUR\");\n        plan_8.coberturas.push(\"ROBO TOTAL\");\n        plan_8.coberturas.push(\"ROBO PARCIAL\");\n        plan_8.coberturas.push(\"INCENDIO TOTAL\");\n        plan_8.coberturas.push(\"INCENDIO PARCIAL\");\n        plan_8.coberturas.push(\"ACCESORIOS PLAN 8\");\n        plan_8.coberturas.push(\"CASCO MERCOSUR(8)\");\n        plan_8.coberturas.push(\"ACCESORIOS ROBO TOTAL\");\n        plan_8.coberturas.push(\"ACCESORIOS ROBO PARCIAL\");\n        plan_8.coberturas.push(\"ACCESORIOS INCENDIO TOTAL\");\n        plan_8.coberturas.push(\"ACCESORIOS INCENDIO PARCIAL\");\n        plan_8.coberturas.push(\"CHOQUE ENTRE ASEGURADOS\");\n        \n    }\n    \n    //Plan 22\n    let plan_22 = info.planes.filter(plan => plan.plan == \"22\")[0];\n    if (plan_22 != null) {\n        plan_22.coberturas = [];\n        plan_22.coberturas.push(\"RESPONSABILIDAD CIVIL CON LIMITE\");\n        plan_22.coberturas.push(\"ADICIONALES Y SERVICIOS\");\n        plan_22.coberturas.push(\"ACCIDENTES PERSONALES\");\n        plan_22.coberturas.push(\"RESP. CIVIL CON LIMITE MERCOSUR\");\n        plan_22.coberturas.push(\"LESIONES O MUERTE POR TERCERO - MERCOSUR\");\n        plan_22.coberturas.push(\"DAÑOS MATERIALES POR TERCERO - MERCOSUR\");\n        plan_22.coberturas.push(\"LESIONES O MUERTE POR EVENTO - MERCOSUR\");\n        plan_22.coberturas.push(\"DAÑOS MATERIALES POR EVENTO - MERCOSUR\");\n        plan_22.coberturas.push(\"ROBO PARCIAL/TOTAL\");\n        plan_22.coberturas.push(\"ROBO CONTENIDO\");\n        plan_22.coberturas.push(\"ROBO CONTENIDO SIN COSTO CA-RH 9.1\");\n        plan_22.coberturas.push(\"INCENDIO PARCIAL/TOTAL\");\n        plan_22.coberturas.push(\"DESTRUCCION TOTAL POR ACCIDENTE\");\n        plan_22.coberturas.push(\"ACCESORIOS ROBO PARCIAL/TOTAL\");\n        plan_22.coberturas.push(\"ACCESORIOS INCENDIO PARCIAL/TOTAL\");\n        plan_22.coberturas.push(\"ACCESORIOS DAÑO TOTAL\");\n        plan_22.coberturas.push(\"ROTURA DE LUNETA Y PARABRISAS\");\n        plan_22.coberturas.push(\"CRISTALES LATERALES Y CERRADURAS\");\n        plan_22.coberturas.push(\"DAÑOS POR GRANIZO\");\n    }\n    \n    //Plan 50\n    let plan_50 = info.planes.filter(plan => plan.plan == \"50\")[0];\n    if (plan_50 != null) {\n        plan_50.coberturas = [];\n        plan_50.coberturas.push(\"RESPONSABILIDAD CIVIL CON LIMITE\");\n        plan_50.coberturas.push(\"ADICIONALES Y SERVICIOS\");\n        plan_50.coberturas.push(\"ACCIDENTES PERSONALES\");\n        plan_50.coberturas.push(\"RESP. CIVIL CON LIMITE MERCOSUR\");\n        plan_50.coberturas.push(\"DAÑOS MATERIALES POR TERCERO - MERCOSUR\");\n        plan_50.coberturas.push(\"LESIONES O MUERTE POR EVENTO - MERCOSUR\");\n        plan_50.coberturas.push(\"DAÑOS MATERIALES POR EVENTO - MERCOSUR\");\n        plan_50.coberturas.push(\"ROBO PARCIAL/TOTAL\");\n        plan_50.coberturas.push(\"ROBO CONTENIDO SIN COSTO CA-RH 9.1\");\n        plan_50.coberturas.push(\"INCENDIO PARCIAL/TOTAL\");\n        plan_50.coberturas.push(\"DESTRUCCION TOTAL POR ACCIDENT\");\n        plan_50.coberturas.push(\"ACCESORIOS PLAN  40\");\n        plan_50.coberturas.push(\"DESCUENTO POR ALTA GAMA-PLAN 40\");\n        plan_50.coberturas.push(\"DAÑO PARCIAL PLAN 50\");\n        plan_50.coberturas.push(\"CASCO MERCOSUR(40)\");\n        plan_50.coberturas.push(\"ACCESORIOS ROBO PARCIAL/TOTAL\");\n        plan_50.coberturas.push(\"ACCESORIOS INCENDIO PARCIAL/TOTAL\");\n        plan_50.coberturas.push(\"ACCESORIOS DAÑO TOTAL\");\n        plan_50.coberturas.push(\"DAÑOS POR GRANIZO\");\n        plan_50.coberturas.push(\"CHOQUE ENTRE ASEGURADOS\");\n\n    }\n    \n    //Plan 41\n    let plan_41 = info.planes.filter(plan => plan.plan == \"41\")[0];\n    if (plan_41 != null) {\n        plan_41.coberturas = [];\n        plan_41.coberturas.push(\"RESPONSABILIDAD CIVIL CON LIMITE\");\n        plan_41.coberturas.push(\"ADICIONALES Y SERVICIOS\");\n        plan_41.coberturas.push(\"ACCIDENTES PERSONALES\");\n        plan_41.coberturas.push(\"RESP. CIVIL CON LIMITE MERCOSUR\");\n        plan_41.coberturas.push(\"DAÑOS MATERIALES POR TERCERO - MERCOSUR\");\n        plan_41.coberturas.push(\"LESIONES O MUERTE POR EVENTO - MERCOSUR\");\n        plan_41.coberturas.push(\"DAÑOS MATERIALES POR EVENTO - MERCOSUR\");\n        plan_41.coberturas.push(\"LESIONES O MUERTE POR EVENTO - MERCOSUR\");\n        plan_41.coberturas.push(\"ROBO PARCIAL/TOTAL\");\n        plan_41.coberturas.push(\"ROBO CONTENIDO\");\n        plan_41.coberturas.push(\"ROBO CONTENIDO SIN COSTO CA-RH 9.1\");\n        plan_41.coberturas.push(\"INCENDIO PARCIAL/TOTAL\");\n        plan_41.coberturas.push(\"DESTRUCCION TOTAL POR ACCIDENTE\");\n        plan_41.coberturas.push(\"DAÑO PARCIAL\");\n        plan_41.coberturas.push(\"ACCESORIOS PLAN 41\");\n        plan_41.coberturas.push(\"DESCUENTO POR ALTA GAMA-PLAN 41\");\n        plan_41.coberturas.push(\"CASCO MERCOSUR(3)\");\n        plan_41.coberturas.push(\"OPTICAS\");\n        plan_41.coberturas.push(\"ANTENA\");\n        plan_41.coberturas.push(\"ESPEJOS\");\n        plan_41.coberturas.push(\"DAÑOS POR GRANIZO\");\n        plan_41.coberturas.push(\"CHOQUE ENTRE ASEGURADOS\");\n    }\n    \n    //Plan 42\n    let plan_42 = info.planes.filter(plan => plan.plan == \"42\")[0];\n    if (plan_42 != null) {\n        plan_42.coberturas = [];\n        plan_42.coberturas.push(\"Todo riesgo/franquicia fija\");\n        plan_42.coberturas.push(\"Cristales Luneta y Techo\");\n        plan_42.coberturas.push(\"Parabrisa y Cerradura\");\n        plan_42.coberturas.push(\"Robo/Inc parcial s/fcia.\");\n        plan_42.coberturas.push(\"Daños por granizo\");\n        plan_42.coberturas.push(\"Cambio de llaves por RT\");\n        plan_42.coberturas.push(\"Auto sustituto 15 dias\");\n        plan_42.coberturas.push(\"Choque entre asegurados\");\n        plan_42.coberturas.push(\"Gastos de baja por DT o RT\");\n        plan_42.coberturas.push(\"Daño parcial por robo total\");\n        plan_42.coberturas.push(\"Robo hurto/incendio total\");\n        plan_42.coberturas.push(\"Asistencia al vehiculo\");\n        plan_42.coberturas.push(\"Daño total por accidente\");\n        plan_42.coberturas.push(\"Responsabilidad Civil\");\n        plan_42.coberturas.push(\"Cobertura paises Mercosur\");\n    }\n    \n    //Plan 43\n    let plan_43 = info.planes.filter(plan => plan.plan == \"43\")[0];\n    if (plan_43 != null) {\n        plan_43.coberturas = [];\n        plan_43.coberturas.push(\"Todo riesgo/franquicia fija\");\n        plan_43.coberturas.push(\"Cristales Luneta y Techo\");\n        plan_43.coberturas.push(\"Parabrisa y Cerradura\");\n        plan_43.coberturas.push(\"Robo/Inc parcial s/fcia.\");\n        plan_43.coberturas.push(\"Daños por granizo\");\n        plan_43.coberturas.push(\"Cambio de llaves por RT\");\n        plan_43.coberturas.push(\"Auto sustituto 15 dias\");\n        plan_43.coberturas.push(\"Choque entre asegurados\");\n        plan_43.coberturas.push(\"Gastos de baja por DT o RT\");\n        plan_43.coberturas.push(\"Daño parcial por robo total\");\n        plan_43.coberturas.push(\"Robo hurto/incendio total\");\n        plan_43.coberturas.push(\"Asistencia al vehiculo\");\n        plan_43.coberturas.push(\"Daño total por accidente\");\n        plan_43.coberturas.push(\"Responsabilidad Civil\");\n        plan_43.coberturas.push(\"Cobertura paises Mercosur\");\n    }\n    \n    node.warn([\"planes/coberturas\", info.planes]);\n    \n    msg.payload = info \n}\n\n//LOG part 2\nmsg.log.origin = \"bot\";\nmsg.log.destination = \"pseguros\";\nmsg.log.action = \"Cotizar\";\nmsg.log.url = \"/quotation\";\nmsg.log.integrationResponse = JSON.stringify(msg.payload); // este deberia ser el integration response\nmsg.log.statusCode = msg.statusCode;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 880,
        "y": 1200,
        "wires": [
            [
                "5a1325f8.9dc51c",
                "d7a989ad.2106c8",
                "52eab443.e0591c"
            ]
        ]
    },
    {
        "id": "d0e74ef4.b0846",
        "type": "debug",
        "z": "7ee549ef.0fbb28",
        "name": "Cotizacion - Respuesta Servicio",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 1080,
        "wires": []
    },
    {
        "id": "5a1325f8.9dc51c",
        "type": "debug",
        "z": "7ee549ef.0fbb28",
        "name": "Cotizacion - Info para Cliente",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1360,
        "y": 1080,
        "wires": []
    },
    {
        "id": "4a21ff30.78cab",
        "type": "http in",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "url": "inspection/",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 2280,
        "wires": [
            [
                "3bea474a.346988",
                "36cc2d19.eb9782"
            ]
        ]
    },
    {
        "id": "8fe61422.c12f48",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "PSeguros Inspeccion",
        "func": "msg.originalPayload = msg.payload; // log\n\n//msg.url = \"https://apimt.provinciaseguros.com.ar/gateway/PS/PS-INSPECCION/2.0/solicitarIpConCotizacion?apikey=9cc893f8-c119-4eeb-8d68-a3d305927fed\";\nmsg.url = global.get(\"psegurosInspeccion_Url\") + `solicitarIpConCotizacion?apikey=` + global.get(\"psegurosApiKey\");\n\nlet bodyQuery = {};\n\nbodyQuery.nroCotizacion = msg.payload.quotation;\nbodyQuery.patente = msg.payload.licencePlate;\nbodyQuery.productorEmail = msg.payload.brokerEmail != \"\" || global.get(\"psegurosAuth_UserName\");\nbodyQuery.apellidoCliente = msg.payload.clientLastName;\nbodyQuery.nombreCliente = msg.payload.clientName;\nbodyQuery.telefonoCliente =  \"\";\nbodyQuery.celularCliente =  msg.payload.clientPhone;\nbodyQuery.emailCliente = msg.payload.clientEmail;\n\nmsg.payload = bodyQuery;\n\nmsg.integrationPayload = msg.payload; // log\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 480,
        "y": 2380,
        "wires": [
            [
                "a6e8b3bb.9ef56",
                "dd96a3bc.5c619"
            ]
        ]
    },
    {
        "id": "a24b04cf.76cef8",
        "type": "http response",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1270,
        "y": 2340,
        "wires": []
    },
    {
        "id": "d90165e9.7fc688",
        "type": "debug",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 2260,
        "wires": []
    },
    {
        "id": "a6e8b3bb.9ef56",
        "type": "http request",
        "z": "7ee549ef.0fbb28",
        "name": "PSeguros Inspeccion",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 780,
        "y": 2340,
        "wires": [
            [
                "d90165e9.7fc688",
                "13bf90d9.99330f"
            ]
        ]
    },
    {
        "id": "13bf90d9.99330f",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "func": "//LOG 1\nmsg.log = {};\nmsg.log.integrationStatusCode = msg.statusCode;\nmsg.log.integrationPayload = JSON.stringify(msg.integrationPayload);\nmsg.log.integrationResponse = JSON.stringify(msg.payload);\nmsg.log.integrationUrl = msg.url;\n\n//respuesta al chat\nif (msg.statusCode == 200){\n let mensaje = \"Hemos enviado un email con las instruciones para la inspeccion digital\";\n msg.payload = mensaje;\n}\n\n//LOG part 2\nmsg.log.origin = \"bot\";\nmsg.log.destination = \"pseguros\";\nmsg.log.action = \"Inspeccion Online\";\nmsg.log.url = \"/inspection\";\nmsg.log.payload = JSON.stringify(msg.originalPayload);\nmsg.log.response = JSON.stringify(msg.payload);\nmsg.log.statusCode = msg.statusCode;\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1020,
        "y": 2340,
        "wires": [
            [
                "a24b04cf.76cef8",
                "e777efe4.12ca9"
            ]
        ]
    },
    {
        "id": "dd96a3bc.5c619",
        "type": "debug",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 2220,
        "wires": []
    },
    {
        "id": "3bea474a.346988",
        "type": "debug",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 2220,
        "wires": []
    },
    {
        "id": "bf1e0de8.73f14",
        "type": "debug",
        "z": "7ee549ef.0fbb28",
        "name": "Quote IN",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 1060,
        "wires": []
    },
    {
        "id": "20563a9.227f9c6",
        "type": "http in",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "url": "/emision",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 1700,
        "wires": [
            [
                "e1ca547c.50aa78"
            ]
        ]
    },
    {
        "id": "813504a.1ee2af8",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "PSeguros - Emision",
        "func": "msg.originalPayload = msg.payload; //LOG\n\nmsg.url = global.get(\"psegurosEmision_Url\") + `emitir?apikey=` + global.get(\"psegurosApiKey\");\n\ntry {\n    let quotation = msg.payload.quotation;\n    let plan = msg.payload.plan;\n    \n    node.warn([\"Payload emision 1\"], msg.payload);\n    \n    let document = msg.payload.document;\n    let name = msg.payload.name.toUpperCase();\n    \n    node.warn([\"Payload emision 2\"], msg.payload);\n    \n    let lastName = msg.payload.lastname.toUpperCase();\n    \n    node.warn([\"Payload emision 3\"], msg.payload);\n    \n    let gender = msg.payload.gender.toUpperCase();\n    \n    let birthDate = msg.payload.birthDate;\n    let birthPlace = msg.payload.birthPlace;\n    \n    node.warn([\"Payload emision 4\"], msg.payload);\n    \n    let civilStatus = msg.payload.civilStatus.toUpperCase();\n    \n    node.warn([\"Payload emision 5\"], msg.payload);\n    \n    \n    let zipCode = msg.payload.zipCode;\n    let state = msg.payload.state;\n    let location = msg.payload.location;\n    \n    node.warn([\"Payload emision 6\"], msg.payload);\n    \n    \n    let street = msg.payload.street.toUpperCase();\n    \n    \n    let streetNumber = msg.payload.streetNumber;\n    let floor = msg.payload.floor || \"\";\n    let departament = msg.payload.departament || \"\";\n    let phone = msg.payload.phone;\n    let email = msg.payload.email;\n    let creditCard = msg.payload.creditCard;\n    let cardEntity = msg.payload.cardEntity;\n    // node.warn(\"entidad tarjeta\" + cardEntity)\n    \n    let licencePlate = msg.payload.licencePlate;\n    let chasis = msg.payload.chasis;\n    let motor = msg.payload.motor;\n    \n    let bodyEmision = {};\n    \n    bodyEmision.cotizacion = quotation;\n    bodyEmision.plan = plan;\n    \n    //bodyEmision.promocion = \"CLIFIN\"; // Colocar promocion que corresponda segun año\n    //Enviar CODIGO de promocion seleccionado\n    bodyEmision.promocion =  msg.payload.planCodigoPromo;\n    bodyEmision.medioDePago  = \"2\";\n    bodyEmision.origenDePago  = cardEntity ;\n    \n    bodyEmision.datosTomador = {};\n    bodyEmision.datosTomador.tipoDocumento = \"DNI\";\n    bodyEmision.datosTomador.documento = document;\n    bodyEmision.datosTomador.cuitCuil = \"\";\n    bodyEmision.datosTomador.apellido = lastName;\n    bodyEmision.datosTomador.nombre = name\n    bodyEmision.datosTomador.genero = gender;\n    bodyEmision.datosTomador.fechaNacimiento = birthDate;\n    bodyEmision.datosTomador.pais = \"2\";\n    bodyEmision.datosTomador.lugarNacimiento = birthPlace;\n    bodyEmision.datosTomador.estadoCivil = civilStatus;\n    bodyEmision.datosTomador.profesion = \"100\";\n    bodyEmision.datosTomador.expuestoPoliticamente = \"N\";\n    bodyEmision.datosTomador.sujetoObligadoArt230 = \"N\";\n    bodyEmision.datosTomador.observaciones = \"\";\n    bodyEmision.datosTomador.codigoPostal = zipCode;\n    bodyEmision.datosTomador.provincia = state;\n    bodyEmision.datosTomador.localidad = location;\n    bodyEmision.datosTomador.calle = street;\n    bodyEmision.datosTomador.numero = streetNumber;\n    bodyEmision.datosTomador.piso = floor;\n    bodyEmision.datosTomador.departamento = departament;\n    bodyEmision.datosTomador.telefono = phone;\n    bodyEmision.datosTomador.email = email;\n    bodyEmision.datosTomador.datosBancarios = creditCard;\n    \n    //\"4509953566233704\"\n    \n    //Pasar a mayusculas\n    \n    bodyEmision.bien = {};\n    bodyEmision.bien['40023_patente'] = licencePlate.toUpperCase();\n    bodyEmision.bien['40004_numeroChasis'] = chasis.toUpperCase();\n    bodyEmision.bien['40005_numeroMotor'] = motor.toUpperCase();\n    bodyEmision.bien['40080_acreditaDominio'] = \"N\";\n    bodyEmision.bien['40210_poseeEquipoGas'] = \"N\";\n    bodyEmision.bien['40006_numeroReguladorGNC'] = \"\";\n    //bodyEmision.bien['40010_alcance'] = \"I\";\n    //bodyEmision.bien['40009_jurisdiccion'] = \"OJ\";\n    //bodyEmision.bien['40011_tipoServicio'] = \"EJ\";\n    bodyEmision.bien['40115_nroInscripcionAseguradoRuta'] = \"\";\n    //bodyEmision.bien['40084_grupoAfinidad'] = \"\";\n    //Fecha de nacimiento de la persona REAL\n    bodyEmision.bien['16015_fechaNacDDmmaaaa'] = birthDate;\n    \n    \n    bodyEmision.accesorios = [];\n    bodyEmision.textos = [];\n    \n    \n    msg.payload = bodyEmision;\n    msg.integrationPayload = msg.payload;\n   \n    \n    return msg; \n} catch (exception) {\n    node.error([\"Payload emision\"], exception)\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 470,
        "y": 1820,
        "wires": [
            [
                "acd09e8a.37169",
                "7b57d586.88fdbc"
            ]
        ]
    },
    {
        "id": "acd09e8a.37169",
        "type": "http request",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 710,
        "y": 1820,
        "wires": [
            [
                "1e56fd9d.d8ff22",
                "148c34fb.33d3ab"
            ]
        ]
    },
    {
        "id": "d38f3260.929eb",
        "type": "http response",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1190,
        "y": 1820,
        "wires": []
    },
    {
        "id": "1e56fd9d.d8ff22",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "func": "node.warn([\"payload \"]  + msg.payload);\n\n\n//Salida\n//Enviar mail a Vero / Emision Observada\n// Mensaje de que quedo observado\n\n//https://pseguros.visualstudio.com/PS/_wiki/wikis/Wiki%20WhatsApp/1512/L%C3%B3gica-de-Servicio-de-Emisi%C3%B3n-Planes-y-Promociones\n\nif (msg.statusCode == 200) { \n    //Caso 1 = TODO OK\n    //No hace falta hacer nada \n    //Logica para definir si lleva IP y si es ONLINE\n    let plan = msg.originalPayload.plan;\n    if (plan == 22 || plan == 41 || plan == 50 || plan == 2 || plan == 8) {\n        msg.payload.ip = true; //Llamar a servicio\n        msg.payload.ipGenerada = true; //Mostrar mensaje\n    } else {\n        msg.payload.ip = false;\n        msg.payload.ipGenerada = false;\n    }\n    \n    if (plan == 22 || plan == 2 || plan == 8 || plan == 7 || plan == 4) {\n        msg.payload.online = true;   \n    } else {\n        msg.payload.online = false;  \n    }\n    \n} else if (msg.statusCode == 401) {\n    // Caso 2 = Error de servicio\n    // No genero Emision observada\n    msg.statusCode = 401;\n} else  if(msg.statusCode == 400) {\n    // Caso 3 = Error de negocio\n    // No genera Emision observada\n    msg.statusCode = 400;\n} else  if(msg.statusCode == 500) {\n    // Caso 4 = Error de negocio\n    // Emision observada\n    msg.statusCode = 500;\n    \n    //Avisar de que se genero IP, no llamar al servicio, solo informar\n     //Movido aca para error 500\n    let strInspeccion = msg.payload.observations.toLowerCase() ;\n    \n    // CON ERRORES\n    if (strInspeccion.includes(\"inspeccion\")) {\n        msg.payload.ip = false; //No genero IP\n        msg.payload.ipGenerada = true; //Informo IP\n    } else {\n        msg.payload.ip = false; //No genero IP\n        msg.payload.ipGenerada = false; //Informo IP\n    }\n    \n}\n\n\n//Armo LOG\nmsg.log = {};\nmsg.log.integrationStatusCode = msg.statusCode;\nmsg.log.integrationPayload = JSON.stringify(msg.integrationPayload);\nmsg.log.integrationResponse = JSON.stringify(msg.payload);\nmsg.log.integrationUrl = msg.url;\n\n//LOG part 2\nmsg.log.origin = \"bot\";\nmsg.log.destination = \"pseguros\";\nmsg.log.action = \"Emision\";\nmsg.log.url = \"/emision\";\nmsg.log.payload = JSON.stringify(msg.originalPayload);\nmsg.log.response = JSON.stringify(msg.payload);\nmsg.log.statusCode = msg.statusCode;\n\n// Esteban Agrega aca 29/03/21\n\n// Fin Agrega\n\n\n//Nothing to do\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 960,
        "y": 1820,
        "wires": [
            [
                "d38f3260.929eb",
                "5bd5dd48.a4d074",
                "c87703da.7e2e9"
            ]
        ]
    },
    {
        "id": "148c34fb.33d3ab",
        "type": "debug",
        "z": "7ee549ef.0fbb28",
        "name": "Emision 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 1700,
        "wires": []
    },
    {
        "id": "7b57d586.88fdbc",
        "type": "debug",
        "z": "7ee549ef.0fbb28",
        "name": "Emision 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 1700,
        "wires": []
    },
    {
        "id": "8c8d5833.ae7498",
        "type": "http in",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "url": "state/:stateName",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 820,
        "wires": [
            [
                "1b6d59cc.a4d2f6",
                "4074fba5.fca764"
            ]
        ]
    },
    {
        "id": "31d16c73.9959c4",
        "type": "http request",
        "z": "7ee549ef.0fbb28",
        "name": "PSeguros - Provincias",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 620,
        "y": 940,
        "wires": [
            [
                "c4225049.00645",
                "77ec4d3c.2612d4"
            ]
        ]
    },
    {
        "id": "cf5c6ae4.30a398",
        "type": "http response",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1170,
        "y": 940,
        "wires": []
    },
    {
        "id": "1b6d59cc.a4d2f6",
        "type": "debug",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 800,
        "wires": []
    },
    {
        "id": "77ec4d3c.2612d4",
        "type": "debug",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 800,
        "wires": []
    },
    {
        "id": "97ac2e22.87d",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "PSeguros - Provincias",
        "func": "//Primero guardo marca que busco\nmsg.searchCriteria = msg.req.params.stateName; \n\n//msg.url = \"https://apimt.provinciaseguros.com.ar/gateway/PS/PS-COTIZACION/2.2/datosGenerales/provincias/4/04100?apikey=9cc893f8-c119-4eeb-8d68-a3d305927fed\";\nmsg.url = global.get(\"psegurosCotizacion_Url\") + `datosGenerales/provincias/4/04100?apikey=` + global.get(\"psegurosApiKey\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 280,
        "y": 940,
        "wires": [
            [
                "31d16c73.9959c4"
            ]
        ]
    },
    {
        "id": "c4225049.00645",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "response",
        "func": "let states = msg.payload\nvar searchCriteria = msg.searchCriteria;\nvar result = [];\n\nstates.forEach(state => {\n  if (state.descripcion.toLowerCase().includes(searchCriteria.toLowerCase()))\n        result.push(state);\n}) \n\n\nmsg.payload = result\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 880,
        "y": 940,
        "wires": [
            [
                "cf5c6ae4.30a398",
                "36b1f2e1.294b3e"
            ]
        ]
    },
    {
        "id": "9851dcc3.f8356",
        "type": "http in",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "url": "/quotationInfo",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 2540,
        "wires": [
            [
                "8aacdae.daa4628"
            ]
        ]
    },
    {
        "id": "2097540b.c944ec",
        "type": "http request",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 710,
        "y": 2620,
        "wires": [
            [
                "6ace3d17.8c65e4"
            ]
        ]
    },
    {
        "id": "b5a56a51.4a6478",
        "type": "http response",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1090,
        "y": 2620,
        "wires": []
    },
    {
        "id": "5342c60e.c1b318",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "PS Info Cotizacion",
        "func": "\nlet quotation = msg.payload.quotation\n\n//msg.url =  `https://apimt.provinciaseguros.com.ar/gateway/PS/PS-NOVEDADES/3.0/infoCotizacion/${nmoQuotation}?apikey=9cc893f8-c119-4eeb-8d68-a3d305927fed`;\n\nmsg.url = global.get(\"psegurosNovedades_Url\") + `infoCotizacion/${quotation}?apiKey=` + global.get(\"psegurosApiKey\");\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 470,
        "y": 2620,
        "wires": [
            [
                "2097540b.c944ec"
            ]
        ]
    },
    {
        "id": "6ace3d17.8c65e4",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "func": "let response = JSON.parse(msg.payload);\n\nmsg.payload = response;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 920,
        "y": 2620,
        "wires": [
            [
                "b5a56a51.4a6478"
            ]
        ]
    },
    {
        "id": "4e99bb05.57faf4",
        "type": "http in",
        "z": "c289f04a.5490c",
        "name": "",
        "url": "/client",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 160,
        "wires": [
            [
                "25e8a4c0.f8c01c",
                "ea9b595a.894628"
            ]
        ]
    },
    {
        "id": "29293e6c.f68602",
        "type": "function",
        "z": "c289f04a.5490c",
        "name": "Response",
        "func": "//Armo LOG\nmsg.log = {};\nmsg.log.integrationStatusCode = msg.statusCode;\nmsg.log.integrationPayload = JSON.stringify(msg.integrationPayload);\nmsg.log.integrationResponse = JSON.stringify(msg.payload);\nmsg.log.integrationUrl = msg.url;\n\nif (msg.statusCode === 200) {\n    \n    //Si encontro polizas\n    if (msg.payload.data.polizas != undefined) {\n       \n        var document = msg.req.params.document;\n        //Chequear si existe el cliente y tiene Polizas\n        let policies = msg.payload.data.polizas\n        \n        node.warn([\"Client_1\", policies])\n        \n        //Chequear poliza automotor\n        let policiesCar = msg.payload.data.polizas.filter(poliza => poliza.ramo == \"4\")\n        \n        let policiesIntegrales = msg.payload.data.polizas.filter(poliza => poliza.ramo == \"8\")\n        \n        node.warn([\"Client_2\", policiesCar])\n        node.warn([\"Client_3\", policiesIntegrales])\n        \n        let securityQuestion = {};\n        \n        //Preguntas de seguridad\n        msg.payload.securityQuestions = [];\n        \n        //Si tiene patentes de Auto, agrego estas preguntas\n        if (policiesCar && policiesCar.length > 0) {\n            \n            securityQuestion = {};\n            \n            securityQuestion.question = \"¿Puede indicarnos la patente de uno de sus vehículos asegurado en la compañía?\";\n            //Puedo tener mas de una respuesta valida - Agrego las patentes validas\n            securityQuestion.answer = [];\n            policiesCar.forEach(policyCar => { securityQuestion.answer.push(policyCar.patente)});\n            \n            msg.payload.securityQuestions.push(securityQuestion);\n            \n        }\n        \n        //Si tiene patentes de Auto, agrego estas preguntas\n        if (policiesIntegrales  && policiesIntegrales.length > 0) {\n            \n            securityQuestion = {};\n            \n            securityQuestion.question = \"¿Puede indicarnos la dirección (calle) de uno de sus bienes asegurados en la compañía?\";\n            //Puedo tener mas de una respuesta valida - Agrego los bienes\n            securityQuestion.answer = [];\n            policiesIntegrales.forEach(policyIntegral => { securityQuestion.answer.push(policyIntegral.bien)});\n            \n            msg.payload.securityQuestions.push(securityQuestion);\n            \n        }\n\n    } else {\n        //TODO: Puede ser por cliente NO encontrado, polizas no vigentes, u otro RAMO\n        //TODO: No conocemos los codigos de error AUN\n        if (msg.payload.data.mensaje == \"1\") {\n             //Codigo de error cliente no encontrado\n            msg.statusCode = 404;\n            msg.payload = \"Cliente no encontrado\";\n        } else if (msg.payload.data.mensaje == \"2\") {\n            //Codigo de error Polizas no vigentes\n            msg.statusCode = 404;\n            msg.payload = \"Polizas no vigentes\";\n        } else if (msg.payload.data.mensaje == \"3\") {\n            //Codigo de error Polizas no vigentes\n            msg.statusCode = 204;\n            msg.payload = \"Ramos no disponibles - Solicitar atencion humana\";\n        }\n    }\n\n \n} else {\n    msg.statusCode = 500;\n    msg.payload = \"Error - vuelva a intentar nuevamente\";\n}\n\n//LOG part 2\nmsg.log.origin = \"bot\";\nmsg.log.destination = \"pseguros\";\nmsg.log.action = \"Obtener cliente\";\nmsg.log.url = \"/client\";\nmsg.log.payload = JSON.stringify(msg.originalPayload);\nmsg.log.response = JSON.stringify(msg.payload);\nmsg.log.statusCode = msg.statusCode;\n\n\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1020,
        "y": 300,
        "wires": [
            [
                "74b3a226.91758c",
                "d9ccb293.6a787",
                "c414dfa3.0cddc"
            ]
        ]
    },
    {
        "id": "74b3a226.91758c",
        "type": "http response",
        "z": "c289f04a.5490c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1210,
        "y": 300,
        "wires": []
    },
    {
        "id": "25e8a4c0.f8c01c",
        "type": "debug",
        "z": "c289f04a.5490c",
        "name": "getClient",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 80,
        "wires": []
    },
    {
        "id": "7a106859.2c1a38",
        "type": "inject",
        "z": "60e059d3.b0f6b8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 100,
        "wires": [
            [
                "1c8d1f43.e18391"
            ]
        ]
    },
    {
        "id": "1c8d1f43.e18391",
        "type": "change",
        "z": "60e059d3.b0f6b8",
        "name": "Setear valores globales",
        "rules": [
            {
                "t": "set",
                "p": "psegurosAuth_Url",
                "pt": "global",
                "to": "psegurosAuth_Url",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "psegurosAuth_GrantType",
                "pt": "global",
                "to": "psegurosAuth_GrantType",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "psegurosAuth_UserName",
                "pt": "global",
                "to": "psegurosAuth_UserName",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "psegurosAuth_Password",
                "pt": "global",
                "to": "psegurosAuth_Password",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "psegurosAuth_Client_Secret",
                "pt": "global",
                "to": "psegurosAuth_Client_Secret",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "psegurosAuth_Client_Id",
                "pt": "global",
                "to": "psegurosAuth_Client_Id",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "psegurosApiKey",
                "pt": "global",
                "to": "psegurosApiKey",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "psegurosCotizacion_Url",
                "pt": "global",
                "to": "psegurosCotizacion_Url",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "psegurosEmision_Url",
                "pt": "global",
                "to": "psegurosEmision_Url",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "psegurosInspeccion_Url",
                "pt": "global",
                "to": "psegurosInspeccion_Url",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "psegurosInfo_Url",
                "pt": "global",
                "to": "psegurosInfo_Url",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "psegurosNovedades_Url",
                "pt": "global",
                "to": "psegurosNovedades_Url",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "psegurosEmision_2_Url",
                "pt": "global",
                "to": "psegurosEmision_2_Url",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "public",
                "pt": "global",
                "to": "public",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "promo_template",
                "pt": "global",
                "to": "promo_template",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "rc_template",
                "pt": "global",
                "to": "rc_template",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "infobip_token",
                "pt": "global",
                "to": "infobip_token",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "infobip_scenario",
                "pt": "global",
                "to": "infobip_scenario",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "rocketChat_Url",
                "pt": "global",
                "to": "rocketChat_Url",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "rocketChat_User",
                "pt": "global",
                "to": "rocketChat_User",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "rocketChat_Email",
                "pt": "global",
                "to": "rocketChat_Email",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "rocketChat_Pass",
                "pt": "global",
                "to": "rocketChat_Pass",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "rocketChat_Botname",
                "pt": "global",
                "to": "rocketChat_Botname",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "rocketChat_SSL",
                "pt": "global",
                "to": "rocketChat_SSL",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 450,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "9033dc41.2abdd",
        "type": "comment",
        "z": "60e059d3.b0f6b8",
        "name": "PSeguros TEST",
        "info": "Setear valores de configuracion por Entorno\nPSeguros TEST",
        "x": 320,
        "y": 40,
        "wires": []
    },
    {
        "id": "53aa28bc.29bf98",
        "type": "function",
        "z": "248b9587.09adfa",
        "name": "PSeguros Token",
        "func": "//Servicio para obtener Token de Pseguros\n\nmsg.headers={ \n    'Content-Type': 'application/x-www-form-urlencoded'\n};\n\n//Guardar peticion inicial\nmsg.originalPayload = msg.payload;\n\nmsg.url = global.get(\"psegurosAuth_Url\");\n\nlet formAccess = {}\n\nformAccess={\n    'grant_type' :  global.get(\"psegurosAuth_GrantType\"),\n    'username' : global.get(\"psegurosAuth_UserName\"),\n    'password' : global.get(\"psegurosAuth_Password\"),\n    'client_secret' : global.get(\"psegurosAuth_Client_Secret\"),\n    'client_id' : global.get(\"psegurosAuth_Client_Id\"),\n};\n\nmsg.payload = formAccess\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 690,
        "y": 287,
        "wires": [
            [
                "339e8769.8a9f38"
            ]
        ]
    },
    {
        "id": "d46bf2e7.98806",
        "type": "debug",
        "z": "248b9587.09adfa",
        "name": "PSeguros Auth - Response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 380,
        "wires": []
    },
    {
        "id": "339e8769.8a9f38",
        "type": "http request",
        "z": "248b9587.09adfa",
        "name": "PSeguros - Token",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "body",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 930,
        "y": 280,
        "wires": [
            [
                "e952cbad.53cbd8"
            ]
        ]
    },
    {
        "id": "abd6fb81.40c6e8",
        "type": "debug",
        "z": "248b9587.09adfa",
        "name": "PSeguros Auth - Function",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 380,
        "wires": []
    },
    {
        "id": "e952cbad.53cbd8",
        "type": "function",
        "z": "248b9587.09adfa",
        "name": "Get token",
        "func": "//Obtener accesstoken\nlet authToken = JSON.parse(msg.payload)\n\n//Seteo credenciales en la cabecera\nmsg.headers = {};\nmsg.headers['Authorization'] = \"Bearer \" + authToken.access_token;\n\nmsg.payload = msg.originalPayload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1160,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "7c91ca0f.0ff924",
        "type": "subflow:248b9587.09adfa",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "env": [],
        "x": 280,
        "y": 160,
        "wires": [
            [
                "836bf80b.747198"
            ]
        ]
    },
    {
        "id": "ef867495.5b0568",
        "type": "debug",
        "z": "7ee549ef.0fbb28",
        "name": "PSeguros - brands - Response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 180,
        "wires": []
    },
    {
        "id": "1e69d6bf.aefc39",
        "type": "debug",
        "z": "7ee549ef.0fbb28",
        "name": "PSeguros - brands - Request",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 320,
        "wires": []
    },
    {
        "id": "8ef60da5.20b09",
        "type": "function-npm",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "func": "const {distance, closest} = require('fastest-levenshtein');\n\ntry {\n    \n    var marcas = msg.payload;\n    var searchCriteria = msg.searchCriteria.toLowerCase();\n    var preResults = [];\n    var results = [];\n    \n    marcas.forEach(marca => {\n      if (marca.descripcion.toLowerCase().includes(searchCriteria))\n            preResults.push(marca);\n    }) \n    \n    preResults.forEach(brandFiltered => {\n        let dist = distance(searchCriteria, brandFiltered.descripcion.replace(/ /g, ''));\n        results.push({dist, brandFiltered});\n        //flatened.push(modelo.descripcion.replace(/ /g, ''));\n    })\n    \n    msg.preresults = preResults;\n    \n    //Algoritmo para ordenar\n    msg.results = results.sort((a,b) => (a.dist > b.dist) ? 1 : ((b.dist > a.dist) ? -1 : 0));\n    \n\n}catch (exception) {\n    node.error(\"Error\", exception)\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 730,
        "y": 240,
        "wires": [
            [
                "b32cf65f.ced7b8",
                "af4b0342.00155"
            ]
        ]
    },
    {
        "id": "e9b1bab8.be9688",
        "type": "subflow:248b9587.09adfa",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "env": [],
        "x": 280,
        "y": 560,
        "wires": [
            [
                "d5f623bc.09378"
            ]
        ]
    },
    {
        "id": "4074fba5.fca764",
        "type": "subflow:248b9587.09adfa",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "env": [],
        "x": 240,
        "y": 880,
        "wires": [
            [
                "97ac2e22.87d"
            ]
        ]
    },
    {
        "id": "32ed8f25.6e21a",
        "type": "subflow:248b9587.09adfa",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "env": [],
        "x": 240,
        "y": 1140,
        "wires": [
            [
                "8d1f8743.53ca18"
            ]
        ]
    },
    {
        "id": "36b1f2e1.294b3e",
        "type": "debug",
        "z": "7ee549ef.0fbb28",
        "name": "States OUT",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 840,
        "wires": []
    },
    {
        "id": "62a79754.343008",
        "type": "inject",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 310,
        "y": 1460,
        "wires": [
            [
                "aac3000e.0ca9c"
            ]
        ]
    },
    {
        "id": "918fc464.6531a8",
        "type": "jimp-image",
        "z": "7ee549ef.0fbb28",
        "name": "Get template",
        "data": "image.url",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "image.font",
        "parameter1Type": "msg",
        "parameter2": "image.x",
        "parameter2Type": "msg",
        "parameter3": "image.y",
        "parameter3Type": "msg",
        "parameter4": "image.text",
        "parameter4Type": "msg",
        "parameter5": "",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "image.payload",
        "sendPropertyType": "msg",
        "parameterCount": 6,
        "jimpFunction": "print",
        "selectedJimpFunction": {
            "name": "print",
            "fn": "print",
            "description": "Print text to the image",
            "parameters": [
                {
                    "name": "font|str",
                    "type": "jimpFont",
                    "required": true,
                    "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                },
                {
                    "name": "x",
                    "type": "num",
                    "required": true,
                    "hint": "x coordinate to print text"
                },
                {
                    "name": "y",
                    "type": "num",
                    "required": true,
                    "hint": "y coordinate to print text"
                },
                {
                    "name": "text",
                    "type": "str",
                    "required": true,
                    "hint": "text to print"
                },
                {
                    "name": "maxWidth",
                    "type": "num",
                    "required": false,
                    "hint": "wrap text at maxWidth"
                },
                {
                    "name": "maxHeight",
                    "type": "num",
                    "required": false,
                    "hint": "max height"
                }
            ]
        },
        "x": 690,
        "y": 1320,
        "wires": [
            [
                "635b1352.d3259c",
                "31047e79.12a852",
                "fcce0faf.bb7ca"
            ]
        ]
    },
    {
        "id": "aac3000e.0ca9c",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "Define header",
        "func": "msg.headers = {};\nmsg.headers[\"content-Disposition\"] = ` attachment; filename=\"PSeguros - Promos.png\"`\n\nmsg.image = {};\n\n//msg.image.url = \"http://rocket.it.mindbot.com.ar:1881/Cotizacion - Promos - Template v1.0.png\";\nmsg.image.url = global.get(\"public\") + global.get(\"promo_template\");\n\nmsg.image.font = \"FONT_SANS_14_BLACK\";\nmsg.image.x = 58;\nmsg.image.y = 5;\nmsg.image.text = `Propuesta: ${msg.payload.response.numeroCotizacion} - ${msg.payload.modelOutput} - Suma asegurada: ${msg.payload.response.sumaAsegurada} - ${new Date().toString(\"dd'/'MM'/'yyyy\")}`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 480,
        "y": 1320,
        "wires": [
            [
                "918fc464.6531a8",
                "920fad56.07898"
            ]
        ]
    },
    {
        "id": "fcce0faf.bb7ca",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "Promo 1 - valor NOAP",
        "func": "msg.image.font = \"FONT_SANS_16_WHITE\";\nmsg.image.x = 290;\nmsg.image.y = 60;\n\n//Selecciono primer plan???\nlet plan = msg.payload.response.planes[0];\nlet valorNoAP = plan.promocionesPorPlan[1].premio;\n\nmsg.image.text = `$ ${valorNoAP} POR MES`;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1340,
        "y": 1240,
        "wires": [
            [
                "21f3b6e3.a7021a"
            ]
        ]
    },
    {
        "id": "21f3b6e3.a7021a",
        "type": "jimp-image",
        "z": "7ee549ef.0fbb28",
        "name": "Get template",
        "data": "image.payload",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "image.font",
        "parameter1Type": "msg",
        "parameter2": "image.x",
        "parameter2Type": "msg",
        "parameter3": "image.y",
        "parameter3Type": "msg",
        "parameter4": "image.text",
        "parameter4Type": "msg",
        "parameter5": "image.maxWidth",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "image.payload",
        "sendPropertyType": "msg",
        "parameterCount": 6,
        "jimpFunction": "print",
        "selectedJimpFunction": {
            "name": "print",
            "fn": "print",
            "description": "Print text to the image",
            "parameters": [
                {
                    "name": "font|str",
                    "type": "jimpFont",
                    "required": true,
                    "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                },
                {
                    "name": "x",
                    "type": "num",
                    "required": true,
                    "hint": "x coordinate to print text"
                },
                {
                    "name": "y",
                    "type": "num",
                    "required": true,
                    "hint": "y coordinate to print text"
                },
                {
                    "name": "text",
                    "type": "str",
                    "required": true,
                    "hint": "text to print"
                },
                {
                    "name": "maxWidth",
                    "type": "num",
                    "required": false,
                    "hint": "wrap text at maxWidth"
                },
                {
                    "name": "maxHeight",
                    "type": "num",
                    "required": false,
                    "hint": "max height"
                }
            ]
        },
        "x": 1570,
        "y": 1240,
        "wires": [
            [
                "53adabcc.aa0604"
            ]
        ]
    },
    {
        "id": "53adabcc.aa0604",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "Promo 1 - valor PROMO",
        "func": "msg.image.font = \"FONT_SANS_32_WHITE\";\nmsg.image.x = 220;\nmsg.image.y = 115;\n\n//Selecciono primer plan???\nlet plan = msg.payload.response.planes[0];\nlet valorPromo = plan.promocionesPorPlan[0].premio;\n\nmsg.image.text = `$ ${valorPromo} POR MES`;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1790,
        "y": 1240,
        "wires": [
            [
                "c59bf735.627708"
            ]
        ]
    },
    {
        "id": "c59bf735.627708",
        "type": "jimp-image",
        "z": "7ee549ef.0fbb28",
        "name": "Get template",
        "data": "image.payload",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "image.font",
        "parameter1Type": "msg",
        "parameter2": "image.x",
        "parameter2Type": "msg",
        "parameter3": "image.y",
        "parameter3Type": "msg",
        "parameter4": "image.text",
        "parameter4Type": "msg",
        "parameter5": "image.maxWidth",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "image.payload",
        "sendPropertyType": "msg",
        "parameterCount": 6,
        "jimpFunction": "print",
        "selectedJimpFunction": {
            "name": "print",
            "fn": "print",
            "description": "Print text to the image",
            "parameters": [
                {
                    "name": "font|str",
                    "type": "jimpFont",
                    "required": true,
                    "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                },
                {
                    "name": "x",
                    "type": "num",
                    "required": true,
                    "hint": "x coordinate to print text"
                },
                {
                    "name": "y",
                    "type": "num",
                    "required": true,
                    "hint": "y coordinate to print text"
                },
                {
                    "name": "text",
                    "type": "str",
                    "required": true,
                    "hint": "text to print"
                },
                {
                    "name": "maxWidth",
                    "type": "num",
                    "required": false,
                    "hint": "wrap text at maxWidth"
                },
                {
                    "name": "maxHeight",
                    "type": "num",
                    "required": false,
                    "hint": "max height"
                }
            ]
        },
        "x": 2010,
        "y": 1240,
        "wires": [
            [
                "ead7db84.993d08"
            ]
        ]
    },
    {
        "id": "ead7db84.993d08",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "Promo 1 - Producto",
        "func": "msg.image.font = \"FONT_SANS_16_WHITE\";\nmsg.image.x = 250;\nmsg.image.y = 180;\n\n//Selecciono primer plan???\nlet plan = msg.payload.response.planes[0];\nlet producto = plan.descripcion;\n\nmsg.image.text = `${producto}`;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2210,
        "y": 1240,
        "wires": [
            [
                "2c7eed74.fd4162"
            ]
        ]
    },
    {
        "id": "3a08c45e.21564c",
        "type": "image viewer",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "width": "200",
        "data": "payload",
        "dataType": "msg",
        "x": 3050,
        "y": 1520,
        "wires": [
            [
                "26eb048a.5f1e3c",
                "53d90cdb.ac7a64"
            ]
        ]
    },
    {
        "id": "635b1352.d3259c",
        "type": "image viewer",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "width": "200",
        "data": "image.payload",
        "dataType": "msg",
        "x": 910,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "31047e79.12a852",
        "type": "debug",
        "z": "7ee549ef.0fbb28",
        "name": "Header",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 1280,
        "wires": []
    },
    {
        "id": "26eb048a.5f1e3c",
        "type": "debug",
        "z": "7ee549ef.0fbb28",
        "name": "Quotes + Image",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3620,
        "y": 1180,
        "wires": []
    },
    {
        "id": "d7a989ad.2106c8",
        "type": "http response",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1090,
        "y": 1200,
        "wires": []
    },
    {
        "id": "c61893c2.12e85",
        "type": "http in",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "url": "/quotation/promos",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 1320,
        "wires": [
            [
                "aac3000e.0ca9c"
            ]
        ]
    },
    {
        "id": "e1ca547c.50aa78",
        "type": "subflow:248b9587.09adfa",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "env": [],
        "x": 220,
        "y": 1780,
        "wires": [
            [
                "813504a.1ee2af8",
                "7b45f389.9c66dc"
            ]
        ]
    },
    {
        "id": "36cc2d19.eb9782",
        "type": "subflow:248b9587.09adfa",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "env": [],
        "x": 260,
        "y": 2340,
        "wires": [
            [
                "8fe61422.c12f48"
            ]
        ]
    },
    {
        "id": "8aacdae.daa4628",
        "type": "subflow:248b9587.09adfa",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "env": [],
        "x": 260,
        "y": 2620,
        "wires": [
            [
                "5342c60e.c1b318"
            ]
        ]
    },
    {
        "id": "8be7f667.b7e4c8",
        "type": "http in",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "url": "nationality/:nationalityName",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 230,
        "y": 3300,
        "wires": [
            [
                "7461e69d.1aab78",
                "15527054.0c6a9"
            ]
        ]
    },
    {
        "id": "6caed24d.01950c",
        "type": "http request",
        "z": "7ee549ef.0fbb28",
        "name": "PSeguros - Nacionalidades",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 780,
        "y": 3400,
        "wires": [
            [
                "89741a05.1fd498",
                "4a29f00a.fca52"
            ]
        ]
    },
    {
        "id": "5688af64.2d693",
        "type": "http response",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1330,
        "y": 3380,
        "wires": []
    },
    {
        "id": "7461e69d.1aab78",
        "type": "debug",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 3300,
        "wires": []
    },
    {
        "id": "17d2192c.59b007",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "PSeguros - Nationalities",
        "func": "//Primero guardo marca que busco\nmsg.searchCriteria = msg.req.params.nationalityName; \n\n//msg.url = \"https://apimt.provinciaseguros.com.ar/gateway/PS/PS-EMISION/1.1/info/paises?apikey=9cc893f8-c119-4eeb-8d68-a3d305927fed\";\nmsg.url = global.get(\"psegurosEmision_Url\") + `info/paises?apikey=` + global.get(\"psegurosApiKey\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 530,
        "y": 3400,
        "wires": [
            [
                "6caed24d.01950c"
            ]
        ]
    },
    {
        "id": "15527054.0c6a9",
        "type": "subflow:248b9587.09adfa",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "env": [],
        "x": 280,
        "y": 3400,
        "wires": [
            [
                "17d2192c.59b007"
            ]
        ]
    },
    {
        "id": "a6931131.fd1c9",
        "type": "debug",
        "z": "7ee549ef.0fbb28",
        "name": "Nationalities OUT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 3500,
        "wires": []
    },
    {
        "id": "c65794d2.f63f18",
        "type": "http in",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "url": "location/:zipCode/:state/:locationName",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 270,
        "y": 3020,
        "wires": [
            [
                "f0b50084.443aa"
            ]
        ]
    },
    {
        "id": "ec9235f3.484eb8",
        "type": "http request",
        "z": "7ee549ef.0fbb28",
        "name": "PSeguros - Localidades",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 790,
        "y": 3080,
        "wires": [
            [
                "cebe7115.6733",
                "274f5664.3e5a5a"
            ]
        ]
    },
    {
        "id": "d40757fd.b1bfa8",
        "type": "http response",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1230,
        "y": 3120,
        "wires": []
    },
    {
        "id": "a0db1b30.fbef68",
        "type": "debug",
        "z": "7ee549ef.0fbb28",
        "name": "Localidades payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 2900,
        "wires": []
    },
    {
        "id": "7ba244c.36851bc",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "PSeguros - Localidades",
        "func": "//Primero guardo marca que busco\nmsg.searchCriteria = msg.req.params.locationName; \n\nlet zipCode = msg.req.params.zipCode;\nlet state = msg.req.params.state;\n\n// node.warn(\"Codigo postal \" +  msg.req.params.zipCode)\n//node.warn(\"Provincia \" + province)\n\n//msg.url = `\n//https://apimp.provinciaseguros.com.ar/gateway/PS/PS-EMISION/2.0/info/localidades/{codigoPostal}/{provincia}?apikey=84630d93-d8c2-40b3-ad3d-b82773c092b5`;\nmsg.url = global.get(\"psegurosEmision_Url\") + `info/localidades/${zipCode}/${state}?apikey=` + global.get(\"psegurosApiKey\");\n\n\n//TODO:!\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 530,
        "y": 3080,
        "wires": [
            [
                "ec9235f3.484eb8",
                "a0db1b30.fbef68"
            ]
        ]
    },
    {
        "id": "f0b50084.443aa",
        "type": "subflow:248b9587.09adfa",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "env": [],
        "x": 240,
        "y": 3080,
        "wires": [
            [
                "7ba244c.36851bc"
            ]
        ]
    },
    {
        "id": "4f32083.a11def8",
        "type": "debug",
        "z": "7ee549ef.0fbb28",
        "name": "Localidades OUT",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 3060,
        "wires": []
    },
    {
        "id": "7b45f389.9c66dc",
        "type": "debug",
        "z": "7ee549ef.0fbb28",
        "name": "Emision 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 1700,
        "wires": []
    },
    {
        "id": "e9a67e8d.8afaf",
        "type": "http in",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "url": "/policy/rc",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 2000,
        "wires": [
            [
                "61805de1.646fe4",
                "57b98a82.5cabb4"
            ]
        ]
    },
    {
        "id": "61805de1.646fe4",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "Define Tomador",
        "func": "msg.image = {};\n\n//msg.image.url = \"http://rocket.it.mindbot.com.ar:1881/Talon RC - Template v1.0.png\";\nmsg.image.url = global.get(\"public\") + global.get(\"rc_template\");\n\nmsg.image.font = \"FONT_SANS_14_BLACK\";\nmsg.image.x = 34;\nmsg.image.y = 126;\nmsg.image.text = `Tomador/Asegurado: ${msg.req.query.client}`;\n\nmsg.headers = {};\nmsg.headers[\"content-Disposition\"] = ` attachment; filename=\"PSeguros - Talon circulacion - ${msg.req.query.policy}.png\"`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 440,
        "y": 2000,
        "wires": [
            [
                "67377bbf.a76e94"
            ]
        ]
    },
    {
        "id": "4ededb8e.523864",
        "type": "inject",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 250,
        "y": 2100,
        "wires": [
            [
                "61805de1.646fe4"
            ]
        ]
    },
    {
        "id": "67377bbf.a76e94",
        "type": "jimp-image",
        "z": "7ee549ef.0fbb28",
        "name": "Get template",
        "data": "image.url",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "image.font",
        "parameter1Type": "msg",
        "parameter2": "image.x",
        "parameter2Type": "msg",
        "parameter3": "image.y",
        "parameter3Type": "msg",
        "parameter4": "image.text",
        "parameter4Type": "msg",
        "parameter5": "",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "image.payload",
        "sendPropertyType": "msg",
        "parameterCount": 6,
        "jimpFunction": "print",
        "selectedJimpFunction": {
            "name": "print",
            "fn": "print",
            "description": "Print text to the image",
            "parameters": [
                {
                    "name": "font|str",
                    "type": "jimpFont",
                    "required": true,
                    "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                },
                {
                    "name": "x",
                    "type": "num",
                    "required": true,
                    "hint": "x coordinate to print text"
                },
                {
                    "name": "y",
                    "type": "num",
                    "required": true,
                    "hint": "y coordinate to print text"
                },
                {
                    "name": "text",
                    "type": "str",
                    "required": true,
                    "hint": "text to print"
                },
                {
                    "name": "maxWidth",
                    "type": "num",
                    "required": false,
                    "hint": "wrap text at maxWidth"
                },
                {
                    "name": "maxHeight",
                    "type": "num",
                    "required": false,
                    "hint": "max height"
                }
            ]
        },
        "x": 670,
        "y": 2000,
        "wires": [
            [
                "2ba82002.13173",
                "74091f8e.eca88"
            ]
        ]
    },
    {
        "id": "2ba82002.13173",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "Define Poliza",
        "func": "\nmsg.image.font = \"FONT_SANS_14_BLACK\";\nmsg.image.x = 34;\nmsg.image.y = 158;\nmsg.image.text = `Nro. de Poliza: ${msg.req.query.policy}        Endoso:  0`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 890,
        "y": 2000,
        "wires": [
            [
                "9cd97e82.19abe"
            ]
        ]
    },
    {
        "id": "9cd97e82.19abe",
        "type": "jimp-image",
        "z": "7ee549ef.0fbb28",
        "name": "Get template",
        "data": "image.payload",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "image.font",
        "parameter1Type": "msg",
        "parameter2": "image.x",
        "parameter2Type": "msg",
        "parameter3": "image.y",
        "parameter3Type": "msg",
        "parameter4": "image.text",
        "parameter4Type": "msg",
        "parameter5": "",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "image.payload",
        "sendPropertyType": "msg",
        "parameterCount": 6,
        "jimpFunction": "print",
        "selectedJimpFunction": {
            "name": "print",
            "fn": "print",
            "description": "Print text to the image",
            "parameters": [
                {
                    "name": "font|str",
                    "type": "jimpFont",
                    "required": true,
                    "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                },
                {
                    "name": "x",
                    "type": "num",
                    "required": true,
                    "hint": "x coordinate to print text"
                },
                {
                    "name": "y",
                    "type": "num",
                    "required": true,
                    "hint": "y coordinate to print text"
                },
                {
                    "name": "text",
                    "type": "str",
                    "required": true,
                    "hint": "text to print"
                },
                {
                    "name": "maxWidth",
                    "type": "num",
                    "required": false,
                    "hint": "wrap text at maxWidth"
                },
                {
                    "name": "maxHeight",
                    "type": "num",
                    "required": false,
                    "hint": "max height"
                }
            ]
        },
        "x": 1130,
        "y": 2000,
        "wires": [
            [
                "675e902c.5b46b",
                "5327c931.e76ac8"
            ]
        ]
    },
    {
        "id": "675e902c.5b46b",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "Define Vigencia",
        "func": "\nmsg.image.font = \"FONT_SANS_14_BLACK\";\nmsg.image.x = 34;\nmsg.image.y = 186;\nmsg.image.text = `Vigencia desde el ${msg.req.query.dateFrom} hasta el ${msg.req.query.dateTo}`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1380,
        "y": 2000,
        "wires": [
            [
                "5edd1662.070448"
            ]
        ]
    },
    {
        "id": "5edd1662.070448",
        "type": "jimp-image",
        "z": "7ee549ef.0fbb28",
        "name": "Get template",
        "data": "image.payload",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "image.font",
        "parameter1Type": "msg",
        "parameter2": "image.x",
        "parameter2Type": "msg",
        "parameter3": "image.y",
        "parameter3Type": "msg",
        "parameter4": "image.text",
        "parameter4Type": "msg",
        "parameter5": "",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "image.payload",
        "sendPropertyType": "msg",
        "parameterCount": 6,
        "jimpFunction": "print",
        "selectedJimpFunction": {
            "name": "print",
            "fn": "print",
            "description": "Print text to the image",
            "parameters": [
                {
                    "name": "font|str",
                    "type": "jimpFont",
                    "required": true,
                    "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                },
                {
                    "name": "x",
                    "type": "num",
                    "required": true,
                    "hint": "x coordinate to print text"
                },
                {
                    "name": "y",
                    "type": "num",
                    "required": true,
                    "hint": "y coordinate to print text"
                },
                {
                    "name": "text",
                    "type": "str",
                    "required": true,
                    "hint": "text to print"
                },
                {
                    "name": "maxWidth",
                    "type": "num",
                    "required": false,
                    "hint": "wrap text at maxWidth"
                },
                {
                    "name": "maxHeight",
                    "type": "num",
                    "required": false,
                    "hint": "max height"
                }
            ]
        },
        "x": 1610,
        "y": 2000,
        "wires": [
            [
                "dfe960af.0ef5c"
            ]
        ]
    },
    {
        "id": "dfe960af.0ef5c",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "Define Vehiculo",
        "func": "\n\nmsg.image.font = \"FONT_SANS_14_BLACK\";\nmsg.image.x = 34;\nmsg.image.y = 214;\nmsg.image.text = `Vehiculo Asegurado: ${msg.req.query.vehicule}`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1820,
        "y": 2000,
        "wires": [
            [
                "c90e03c3.cedfc"
            ]
        ]
    },
    {
        "id": "c90e03c3.cedfc",
        "type": "jimp-image",
        "z": "7ee549ef.0fbb28",
        "name": "Get template",
        "data": "image.payload",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "image.font",
        "parameter1Type": "msg",
        "parameter2": "image.x",
        "parameter2Type": "msg",
        "parameter3": "image.y",
        "parameter3Type": "msg",
        "parameter4": "image.text",
        "parameter4Type": "msg",
        "parameter5": "",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "image.payload",
        "sendPropertyType": "msg",
        "parameterCount": 6,
        "jimpFunction": "print",
        "selectedJimpFunction": {
            "name": "print",
            "fn": "print",
            "description": "Print text to the image",
            "parameters": [
                {
                    "name": "font|str",
                    "type": "jimpFont",
                    "required": true,
                    "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                },
                {
                    "name": "x",
                    "type": "num",
                    "required": true,
                    "hint": "x coordinate to print text"
                },
                {
                    "name": "y",
                    "type": "num",
                    "required": true,
                    "hint": "y coordinate to print text"
                },
                {
                    "name": "text",
                    "type": "str",
                    "required": true,
                    "hint": "text to print"
                },
                {
                    "name": "maxWidth",
                    "type": "num",
                    "required": false,
                    "hint": "wrap text at maxWidth"
                },
                {
                    "name": "maxHeight",
                    "type": "num",
                    "required": false,
                    "hint": "max height"
                }
            ]
        },
        "x": 2050,
        "y": 2000,
        "wires": [
            [
                "e97f1d87.179b8"
            ]
        ]
    },
    {
        "id": "e97f1d87.179b8",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "Define Tipo",
        "func": "\n\nmsg.image.font = \"FONT_SANS_14_BLACK\";\nmsg.image.x = 34;\nmsg.image.y = 244;\nmsg.image.text = `Marca y Tipo: ${msg.req.query.type}`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2270,
        "y": 1940,
        "wires": [
            [
                "de44aa36.c2cb38"
            ]
        ]
    },
    {
        "id": "de44aa36.c2cb38",
        "type": "jimp-image",
        "z": "7ee549ef.0fbb28",
        "name": "Get template",
        "data": "image.payload",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "image.font",
        "parameter1Type": "msg",
        "parameter2": "image.x",
        "parameter2Type": "msg",
        "parameter3": "image.y",
        "parameter3Type": "msg",
        "parameter4": "image.text",
        "parameter4Type": "msg",
        "parameter5": "",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "image.payload",
        "sendPropertyType": "msg",
        "parameterCount": 6,
        "jimpFunction": "print",
        "selectedJimpFunction": {
            "name": "print",
            "fn": "print",
            "description": "Print text to the image",
            "parameters": [
                {
                    "name": "font|str",
                    "type": "jimpFont",
                    "required": true,
                    "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                },
                {
                    "name": "x",
                    "type": "num",
                    "required": true,
                    "hint": "x coordinate to print text"
                },
                {
                    "name": "y",
                    "type": "num",
                    "required": true,
                    "hint": "y coordinate to print text"
                },
                {
                    "name": "text",
                    "type": "str",
                    "required": true,
                    "hint": "text to print"
                },
                {
                    "name": "maxWidth",
                    "type": "num",
                    "required": false,
                    "hint": "wrap text at maxWidth"
                },
                {
                    "name": "maxHeight",
                    "type": "num",
                    "required": false,
                    "hint": "max height"
                }
            ]
        },
        "x": 2510,
        "y": 1940,
        "wires": [
            [
                "436e1ab1.084444"
            ]
        ]
    },
    {
        "id": "436e1ab1.084444",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "Define Modelo",
        "func": "\n\nmsg.image.font = \"FONT_SANS_14_BLACK\";\nmsg.image.x = 34;\nmsg.image.y = 277;\nmsg.image.text = `Modelo: ${msg.req.query.year}`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2720,
        "y": 1940,
        "wires": [
            [
                "834c302f.4bf7c"
            ]
        ]
    },
    {
        "id": "834c302f.4bf7c",
        "type": "jimp-image",
        "z": "7ee549ef.0fbb28",
        "name": "Get template",
        "data": "image.payload",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "image.font",
        "parameter1Type": "msg",
        "parameter2": "image.x",
        "parameter2Type": "msg",
        "parameter3": "image.y",
        "parameter3Type": "msg",
        "parameter4": "image.text",
        "parameter4Type": "msg",
        "parameter5": "",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "image.payload",
        "sendPropertyType": "msg",
        "parameterCount": 6,
        "jimpFunction": "print",
        "selectedJimpFunction": {
            "name": "print",
            "fn": "print",
            "description": "Print text to the image",
            "parameters": [
                {
                    "name": "font|str",
                    "type": "jimpFont",
                    "required": true,
                    "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                },
                {
                    "name": "x",
                    "type": "num",
                    "required": true,
                    "hint": "x coordinate to print text"
                },
                {
                    "name": "y",
                    "type": "num",
                    "required": true,
                    "hint": "y coordinate to print text"
                },
                {
                    "name": "text",
                    "type": "str",
                    "required": true,
                    "hint": "text to print"
                },
                {
                    "name": "maxWidth",
                    "type": "num",
                    "required": false,
                    "hint": "wrap text at maxWidth"
                },
                {
                    "name": "maxHeight",
                    "type": "num",
                    "required": false,
                    "hint": "max height"
                }
            ]
        },
        "x": 2950,
        "y": 1940,
        "wires": [
            [
                "1ee1eebe.ad30c1"
            ]
        ]
    },
    {
        "id": "1ee1eebe.ad30c1",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "Define Carroceria",
        "func": "\nmsg.image.font = \"FONT_SANS_14_BLACK\";\nmsg.image.x = 34;\nmsg.image.y = 305;\nmsg.image.text = `Carroceria: ${msg.req.query.chasis}`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3190,
        "y": 1940,
        "wires": [
            [
                "626bfe4f.e4e7c"
            ]
        ]
    },
    {
        "id": "626bfe4f.e4e7c",
        "type": "jimp-image",
        "z": "7ee549ef.0fbb28",
        "name": "Get template",
        "data": "image.payload",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "image.font",
        "parameter1Type": "msg",
        "parameter2": "image.x",
        "parameter2Type": "msg",
        "parameter3": "image.y",
        "parameter3Type": "msg",
        "parameter4": "image.text",
        "parameter4Type": "msg",
        "parameter5": "",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "image.payload",
        "sendPropertyType": "msg",
        "parameterCount": 6,
        "jimpFunction": "print",
        "selectedJimpFunction": {
            "name": "print",
            "fn": "print",
            "description": "Print text to the image",
            "parameters": [
                {
                    "name": "font|str",
                    "type": "jimpFont",
                    "required": true,
                    "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                },
                {
                    "name": "x",
                    "type": "num",
                    "required": true,
                    "hint": "x coordinate to print text"
                },
                {
                    "name": "y",
                    "type": "num",
                    "required": true,
                    "hint": "y coordinate to print text"
                },
                {
                    "name": "text",
                    "type": "str",
                    "required": true,
                    "hint": "text to print"
                },
                {
                    "name": "maxWidth",
                    "type": "num",
                    "required": false,
                    "hint": "wrap text at maxWidth"
                },
                {
                    "name": "maxHeight",
                    "type": "num",
                    "required": false,
                    "hint": "max height"
                }
            ]
        },
        "x": 3410,
        "y": 1940,
        "wires": [
            [
                "a11df037.48a5a"
            ]
        ]
    },
    {
        "id": "a11df037.48a5a",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "Define Dominio",
        "func": "\n\nmsg.image.font = \"FONT_SANS_14_BLACK\";\nmsg.image.x = 34;\nmsg.image.y = 336;\nmsg.image.text = `Dominio: ${msg.req.query.licencePlate}`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3600,
        "y": 1940,
        "wires": [
            [
                "d275fc7b.026ea"
            ]
        ]
    },
    {
        "id": "d275fc7b.026ea",
        "type": "jimp-image",
        "z": "7ee549ef.0fbb28",
        "name": "Get template",
        "data": "image.payload",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "image.font",
        "parameter1Type": "msg",
        "parameter2": "image.x",
        "parameter2Type": "msg",
        "parameter3": "image.y",
        "parameter3Type": "msg",
        "parameter4": "image.text",
        "parameter4Type": "msg",
        "parameter5": "",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "image.payload",
        "sendPropertyType": "msg",
        "parameterCount": 6,
        "jimpFunction": "print",
        "selectedJimpFunction": {
            "name": "print",
            "fn": "print",
            "description": "Print text to the image",
            "parameters": [
                {
                    "name": "font|str",
                    "type": "jimpFont",
                    "required": true,
                    "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                },
                {
                    "name": "x",
                    "type": "num",
                    "required": true,
                    "hint": "x coordinate to print text"
                },
                {
                    "name": "y",
                    "type": "num",
                    "required": true,
                    "hint": "y coordinate to print text"
                },
                {
                    "name": "text",
                    "type": "str",
                    "required": true,
                    "hint": "text to print"
                },
                {
                    "name": "maxWidth",
                    "type": "num",
                    "required": false,
                    "hint": "wrap text at maxWidth"
                },
                {
                    "name": "maxHeight",
                    "type": "num",
                    "required": false,
                    "hint": "max height"
                }
            ]
        },
        "x": 3830,
        "y": 1940,
        "wires": [
            [
                "ab072cc0.3062"
            ]
        ]
    },
    {
        "id": "ab072cc0.3062",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "Define Motor",
        "func": "\n\nmsg.image.font = \"FONT_SANS_14_BLACK\";\nmsg.image.x = 34;\nmsg.image.y = 364;\nmsg.image.text = `MOTOR: ${msg.req.query.motor}`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4030,
        "y": 1940,
        "wires": [
            [
                "31e4bcb4.4487c4"
            ]
        ]
    },
    {
        "id": "31e4bcb4.4487c4",
        "type": "jimp-image",
        "z": "7ee549ef.0fbb28",
        "name": "Get template",
        "data": "image.payload",
        "dataType": "msg",
        "ret": "buf",
        "parameter1": "image.font",
        "parameter1Type": "msg",
        "parameter2": "image.x",
        "parameter2Type": "msg",
        "parameter3": "image.y",
        "parameter3Type": "msg",
        "parameter4": "image.text",
        "parameter4Type": "msg",
        "parameter5": "",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "payload",
        "sendPropertyType": "msg",
        "parameterCount": 6,
        "jimpFunction": "print",
        "selectedJimpFunction": {
            "name": "print",
            "fn": "print",
            "description": "Print text to the image",
            "parameters": [
                {
                    "name": "font|str",
                    "type": "jimpFont",
                    "required": true,
                    "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                },
                {
                    "name": "x",
                    "type": "num",
                    "required": true,
                    "hint": "x coordinate to print text"
                },
                {
                    "name": "y",
                    "type": "num",
                    "required": true,
                    "hint": "y coordinate to print text"
                },
                {
                    "name": "text",
                    "type": "str",
                    "required": true,
                    "hint": "text to print"
                },
                {
                    "name": "maxWidth",
                    "type": "num",
                    "required": false,
                    "hint": "wrap text at maxWidth"
                },
                {
                    "name": "maxHeight",
                    "type": "num",
                    "required": false,
                    "hint": "max height"
                }
            ]
        },
        "x": 4263.26708984375,
        "y": 1934.8133544921875,
        "wires": [
            [
                "4b5a0b16.cf5274",
                "25f2eacc.7ba8e6"
            ]
        ]
    },
    {
        "id": "4b5a0b16.cf5274",
        "type": "image viewer",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "width": "600",
        "data": "payload",
        "dataType": "msg",
        "x": 4410,
        "y": 2000,
        "wires": [
            []
        ]
    },
    {
        "id": "8374a1d1.57a3",
        "type": "http response",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 4730,
        "y": 1700,
        "wires": []
    },
    {
        "id": "74091f8e.eca88",
        "type": "image viewer",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "width": "200",
        "data": "image.payload",
        "dataType": "msg",
        "x": 810,
        "y": 2060,
        "wires": [
            []
        ]
    },
    {
        "id": "5327c931.e76ac8",
        "type": "image viewer",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "width": "200",
        "data": "image.payload",
        "dataType": "msg",
        "x": 1270,
        "y": 2060,
        "wires": [
            []
        ]
    },
    {
        "id": "25f2eacc.7ba8e6",
        "type": "change",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "headers.content-type",
                "pt": "msg",
                "to": "image/png",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 4450,
        "y": 1800,
        "wires": [
            [
                "8374a1d1.57a3"
            ]
        ]
    },
    {
        "id": "57b98a82.5cabb4",
        "type": "debug",
        "z": "7ee549ef.0fbb28",
        "name": "Policy RC",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 1960,
        "wires": []
    },
    {
        "id": "5089eae0.2d98c4",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "Promo 1 - Coberturas",
        "func": "msg.image.font = \"FONT_SANS_16_BLACK\";\nmsg.image.x = 121;\nmsg.image.y = 235;\n\n\nlet plan = msg.payload.response.planes[0];\nlet coberturas = plan.coberturas.slice(0,7);\n\n\nmsg.image.text = \"\";\ncoberturas.forEach(cobertura => {msg.image.text += cobertura + \"\\n\"} )\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2660,
        "y": 1240,
        "wires": [
            [
                "9fe6d87c.17dd58"
            ]
        ]
    },
    {
        "id": "2c7eed74.fd4162",
        "type": "jimp-image",
        "z": "7ee549ef.0fbb28",
        "name": "Get template",
        "data": "image.payload",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "image.font",
        "parameter1Type": "msg",
        "parameter2": "image.x",
        "parameter2Type": "msg",
        "parameter3": "image.y",
        "parameter3Type": "msg",
        "parameter4": "image.text",
        "parameter4Type": "msg",
        "parameter5": "image.maxWidth",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "image.payload",
        "sendPropertyType": "msg",
        "parameterCount": 6,
        "jimpFunction": "print",
        "selectedJimpFunction": {
            "name": "print",
            "fn": "print",
            "description": "Print text to the image",
            "parameters": [
                {
                    "name": "font|str",
                    "type": "jimpFont",
                    "required": true,
                    "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                },
                {
                    "name": "x",
                    "type": "num",
                    "required": true,
                    "hint": "x coordinate to print text"
                },
                {
                    "name": "y",
                    "type": "num",
                    "required": true,
                    "hint": "y coordinate to print text"
                },
                {
                    "name": "text",
                    "type": "str",
                    "required": true,
                    "hint": "text to print"
                },
                {
                    "name": "maxWidth",
                    "type": "num",
                    "required": false,
                    "hint": "wrap text at maxWidth"
                },
                {
                    "name": "maxHeight",
                    "type": "num",
                    "required": false,
                    "hint": "max height"
                }
            ]
        },
        "x": 2430,
        "y": 1240,
        "wires": [
            [
                "5089eae0.2d98c4"
            ]
        ]
    },
    {
        "id": "9fe6d87c.17dd58",
        "type": "jimp-image",
        "z": "7ee549ef.0fbb28",
        "name": "Get template",
        "data": "image.payload",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "image.font",
        "parameter1Type": "msg",
        "parameter2": "image.x",
        "parameter2Type": "msg",
        "parameter3": "image.y",
        "parameter3Type": "msg",
        "parameter4": "image.text",
        "parameter4Type": "msg",
        "parameter5": "image.maxWidth",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "image.payload",
        "sendPropertyType": "msg",
        "parameterCount": 6,
        "jimpFunction": "print",
        "selectedJimpFunction": {
            "name": "print",
            "fn": "print",
            "description": "Print text to the image",
            "parameters": [
                {
                    "name": "font|str",
                    "type": "jimpFont",
                    "required": true,
                    "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                },
                {
                    "name": "x",
                    "type": "num",
                    "required": true,
                    "hint": "x coordinate to print text"
                },
                {
                    "name": "y",
                    "type": "num",
                    "required": true,
                    "hint": "y coordinate to print text"
                },
                {
                    "name": "text",
                    "type": "str",
                    "required": true,
                    "hint": "text to print"
                },
                {
                    "name": "maxWidth",
                    "type": "num",
                    "required": false,
                    "hint": "wrap text at maxWidth"
                },
                {
                    "name": "maxHeight",
                    "type": "num",
                    "required": false,
                    "hint": "max height"
                }
            ]
        },
        "x": 2870,
        "y": 1240,
        "wires": [
            [
                "a7347a83.df5f38"
            ]
        ]
    },
    {
        "id": "6025d919.3bd308",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "Promo 2 - valor NOAP",
        "func": "msg.image.font = \"FONT_SANS_16_WHITE\";\nmsg.image.x = 290;\nmsg.image.y = 440;\n\n//Selecciono primer plan???\nlet plan = msg.payload.response.planes[1];\nlet valorNoAP = plan.promocionesPorPlan[1].premio;\n\nmsg.image.text = `$ ${valorNoAP} por MES`;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1340,
        "y": 1340,
        "wires": [
            [
                "b948a4d5.100e98"
            ]
        ]
    },
    {
        "id": "b948a4d5.100e98",
        "type": "jimp-image",
        "z": "7ee549ef.0fbb28",
        "name": "Get template",
        "data": "image.payload",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "image.font",
        "parameter1Type": "msg",
        "parameter2": "image.x",
        "parameter2Type": "msg",
        "parameter3": "image.y",
        "parameter3Type": "msg",
        "parameter4": "image.text",
        "parameter4Type": "msg",
        "parameter5": "image.maxWidth",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "image.payload",
        "sendPropertyType": "msg",
        "parameterCount": 6,
        "jimpFunction": "print",
        "selectedJimpFunction": {
            "name": "print",
            "fn": "print",
            "description": "Print text to the image",
            "parameters": [
                {
                    "name": "font|str",
                    "type": "jimpFont",
                    "required": true,
                    "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                },
                {
                    "name": "x",
                    "type": "num",
                    "required": true,
                    "hint": "x coordinate to print text"
                },
                {
                    "name": "y",
                    "type": "num",
                    "required": true,
                    "hint": "y coordinate to print text"
                },
                {
                    "name": "text",
                    "type": "str",
                    "required": true,
                    "hint": "text to print"
                },
                {
                    "name": "maxWidth",
                    "type": "num",
                    "required": false,
                    "hint": "wrap text at maxWidth"
                },
                {
                    "name": "maxHeight",
                    "type": "num",
                    "required": false,
                    "hint": "max height"
                }
            ]
        },
        "x": 1570,
        "y": 1340,
        "wires": [
            [
                "47a8473e.430488"
            ]
        ]
    },
    {
        "id": "47a8473e.430488",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "Promo 2 - valor PROMO",
        "func": "msg.image.font = \"FONT_SANS_32_WHITE\";\nmsg.image.x = 220;\nmsg.image.y = 488;\n\nlet plan = msg.payload.response.planes[1];\nlet valorPromo = plan.promocionesPorPlan[0].premio;\n\nmsg.image.text = `$ ${valorPromo} por MES`;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1790,
        "y": 1340,
        "wires": [
            [
                "30064b9e.9da7d4"
            ]
        ]
    },
    {
        "id": "30064b9e.9da7d4",
        "type": "jimp-image",
        "z": "7ee549ef.0fbb28",
        "name": "Get template",
        "data": "image.payload",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "image.font",
        "parameter1Type": "msg",
        "parameter2": "image.x",
        "parameter2Type": "msg",
        "parameter3": "image.y",
        "parameter3Type": "msg",
        "parameter4": "image.text",
        "parameter4Type": "msg",
        "parameter5": "image.maxWidth",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "image.payload",
        "sendPropertyType": "msg",
        "parameterCount": 6,
        "jimpFunction": "print",
        "selectedJimpFunction": {
            "name": "print",
            "fn": "print",
            "description": "Print text to the image",
            "parameters": [
                {
                    "name": "font|str",
                    "type": "jimpFont",
                    "required": true,
                    "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                },
                {
                    "name": "x",
                    "type": "num",
                    "required": true,
                    "hint": "x coordinate to print text"
                },
                {
                    "name": "y",
                    "type": "num",
                    "required": true,
                    "hint": "y coordinate to print text"
                },
                {
                    "name": "text",
                    "type": "str",
                    "required": true,
                    "hint": "text to print"
                },
                {
                    "name": "maxWidth",
                    "type": "num",
                    "required": false,
                    "hint": "wrap text at maxWidth"
                },
                {
                    "name": "maxHeight",
                    "type": "num",
                    "required": false,
                    "hint": "max height"
                }
            ]
        },
        "x": 2010,
        "y": 1340,
        "wires": [
            [
                "a66da1a3.e0c01"
            ]
        ]
    },
    {
        "id": "a66da1a3.e0c01",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "Promo 2 - Producto",
        "func": "msg.image.font = \"FONT_SANS_16_WHITE\";\nmsg.image.x = 250;\nmsg.image.y = 549;\n\nlet plan = msg.payload.response.planes[1];\nlet producto = plan.descripcion;\n\nmsg.image.text = `${producto}`;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2210,
        "y": 1340,
        "wires": [
            [
                "bb841c5c.23f6d"
            ]
        ]
    },
    {
        "id": "bb841c5c.23f6d",
        "type": "jimp-image",
        "z": "7ee549ef.0fbb28",
        "name": "Get template",
        "data": "image.payload",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "image.font",
        "parameter1Type": "msg",
        "parameter2": "image.x",
        "parameter2Type": "msg",
        "parameter3": "image.y",
        "parameter3Type": "msg",
        "parameter4": "image.text",
        "parameter4Type": "msg",
        "parameter5": "image.maxWidth",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "image.payload",
        "sendPropertyType": "msg",
        "parameterCount": 6,
        "jimpFunction": "print",
        "selectedJimpFunction": {
            "name": "print",
            "fn": "print",
            "description": "Print text to the image",
            "parameters": [
                {
                    "name": "font|str",
                    "type": "jimpFont",
                    "required": true,
                    "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                },
                {
                    "name": "x",
                    "type": "num",
                    "required": true,
                    "hint": "x coordinate to print text"
                },
                {
                    "name": "y",
                    "type": "num",
                    "required": true,
                    "hint": "y coordinate to print text"
                },
                {
                    "name": "text",
                    "type": "str",
                    "required": true,
                    "hint": "text to print"
                },
                {
                    "name": "maxWidth",
                    "type": "num",
                    "required": false,
                    "hint": "wrap text at maxWidth"
                },
                {
                    "name": "maxHeight",
                    "type": "num",
                    "required": false,
                    "hint": "max height"
                }
            ]
        },
        "x": 2430,
        "y": 1340,
        "wires": [
            [
                "d5fe1390.59435"
            ]
        ]
    },
    {
        "id": "d5fe1390.59435",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "Promo 2 - Coberturas",
        "func": "msg.image.font = \"FONT_SANS_16_BLACK\";\nmsg.image.x = 121;\nmsg.image.y = 612;\n\nlet plan = msg.payload.response.planes[1];\nlet coberturas = plan.coberturas.slice(0,7);\n\n\nmsg.image.text = \"\";\ncoberturas.forEach(cobertura => {msg.image.text += cobertura + \"\\n\"} )\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2660,
        "y": 1340,
        "wires": [
            [
                "a102179f.4f5c98"
            ]
        ]
    },
    {
        "id": "a102179f.4f5c98",
        "type": "jimp-image",
        "z": "7ee549ef.0fbb28",
        "name": "Get template",
        "data": "image.payload",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "image.font",
        "parameter1Type": "msg",
        "parameter2": "image.x",
        "parameter2Type": "msg",
        "parameter3": "image.y",
        "parameter3Type": "msg",
        "parameter4": "image.text",
        "parameter4Type": "msg",
        "parameter5": "image.maxWidth",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "image.payload",
        "sendPropertyType": "msg",
        "parameterCount": 6,
        "jimpFunction": "print",
        "selectedJimpFunction": {
            "name": "print",
            "fn": "print",
            "description": "Print text to the image",
            "parameters": [
                {
                    "name": "font|str",
                    "type": "jimpFont",
                    "required": true,
                    "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                },
                {
                    "name": "x",
                    "type": "num",
                    "required": true,
                    "hint": "x coordinate to print text"
                },
                {
                    "name": "y",
                    "type": "num",
                    "required": true,
                    "hint": "y coordinate to print text"
                },
                {
                    "name": "text",
                    "type": "str",
                    "required": true,
                    "hint": "text to print"
                },
                {
                    "name": "maxWidth",
                    "type": "num",
                    "required": false,
                    "hint": "wrap text at maxWidth"
                },
                {
                    "name": "maxHeight",
                    "type": "num",
                    "required": false,
                    "hint": "max height"
                }
            ]
        },
        "x": 2870,
        "y": 1340,
        "wires": [
            [
                "fcfb53f0.40a12"
            ]
        ]
    },
    {
        "id": "76d28ee6.db566",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "Promo 3 - valor NOAP",
        "func": "msg.image.font = \"FONT_SANS_16_WHITE\";\nmsg.image.x = 290;\nmsg.image.y = 812;\n\n//Selecciono primer plan???\nlet plan = msg.payload.response.planes[2];\nlet valorNoAP = plan.promocionesPorPlan[1].premio;\n\nmsg.image.text = `$ ${valorNoAP} POR MES`;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1340,
        "y": 1460,
        "wires": [
            [
                "ada918dc.db4618"
            ]
        ]
    },
    {
        "id": "ada918dc.db4618",
        "type": "jimp-image",
        "z": "7ee549ef.0fbb28",
        "name": "Get template",
        "data": "image.payload",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "image.font",
        "parameter1Type": "msg",
        "parameter2": "image.x",
        "parameter2Type": "msg",
        "parameter3": "image.y",
        "parameter3Type": "msg",
        "parameter4": "image.text",
        "parameter4Type": "msg",
        "parameter5": "image.maxWidth",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "image.payload",
        "sendPropertyType": "msg",
        "parameterCount": 6,
        "jimpFunction": "print",
        "selectedJimpFunction": {
            "name": "print",
            "fn": "print",
            "description": "Print text to the image",
            "parameters": [
                {
                    "name": "font|str",
                    "type": "jimpFont",
                    "required": true,
                    "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                },
                {
                    "name": "x",
                    "type": "num",
                    "required": true,
                    "hint": "x coordinate to print text"
                },
                {
                    "name": "y",
                    "type": "num",
                    "required": true,
                    "hint": "y coordinate to print text"
                },
                {
                    "name": "text",
                    "type": "str",
                    "required": true,
                    "hint": "text to print"
                },
                {
                    "name": "maxWidth",
                    "type": "num",
                    "required": false,
                    "hint": "wrap text at maxWidth"
                },
                {
                    "name": "maxHeight",
                    "type": "num",
                    "required": false,
                    "hint": "max height"
                }
            ]
        },
        "x": 1570,
        "y": 1460,
        "wires": [
            [
                "f9f8d045.0c5f"
            ]
        ]
    },
    {
        "id": "f9f8d045.0c5f",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "Promo 3 - valor PROMO",
        "func": "msg.image.font = \"FONT_SANS_32_WHITE\";\nmsg.image.x = 220;\nmsg.image.y = 860;\n\nlet plan = msg.payload.response.planes[2];\nlet valorPromo = plan.promocionesPorPlan[0].premio;\n\nmsg.image.text = `$ ${valorPromo} por MES`;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1790,
        "y": 1460,
        "wires": [
            [
                "cca68732.2224e8"
            ]
        ]
    },
    {
        "id": "cca68732.2224e8",
        "type": "jimp-image",
        "z": "7ee549ef.0fbb28",
        "name": "Get template",
        "data": "image.payload",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "image.font",
        "parameter1Type": "msg",
        "parameter2": "image.x",
        "parameter2Type": "msg",
        "parameter3": "image.y",
        "parameter3Type": "msg",
        "parameter4": "image.text",
        "parameter4Type": "msg",
        "parameter5": "image.maxWidth",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "image.payload",
        "sendPropertyType": "msg",
        "parameterCount": 6,
        "jimpFunction": "print",
        "selectedJimpFunction": {
            "name": "print",
            "fn": "print",
            "description": "Print text to the image",
            "parameters": [
                {
                    "name": "font|str",
                    "type": "jimpFont",
                    "required": true,
                    "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                },
                {
                    "name": "x",
                    "type": "num",
                    "required": true,
                    "hint": "x coordinate to print text"
                },
                {
                    "name": "y",
                    "type": "num",
                    "required": true,
                    "hint": "y coordinate to print text"
                },
                {
                    "name": "text",
                    "type": "str",
                    "required": true,
                    "hint": "text to print"
                },
                {
                    "name": "maxWidth",
                    "type": "num",
                    "required": false,
                    "hint": "wrap text at maxWidth"
                },
                {
                    "name": "maxHeight",
                    "type": "num",
                    "required": false,
                    "hint": "max height"
                }
            ]
        },
        "x": 2010,
        "y": 1460,
        "wires": [
            [
                "85186961.0730a8"
            ]
        ]
    },
    {
        "id": "85186961.0730a8",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "Promo 3 - Producto",
        "func": "msg.image.font = \"FONT_SANS_16_WHITE\";\nmsg.image.x = 250;\nmsg.image.y = 920;\n\nlet plan = msg.payload.response.planes[2];\nlet producto = plan.descripcion;\n\nmsg.image.text = `${producto}`;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2210,
        "y": 1460,
        "wires": [
            [
                "fb6d6d65.abe22"
            ]
        ]
    },
    {
        "id": "fb6d6d65.abe22",
        "type": "jimp-image",
        "z": "7ee549ef.0fbb28",
        "name": "Get template",
        "data": "image.payload",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "image.font",
        "parameter1Type": "msg",
        "parameter2": "image.x",
        "parameter2Type": "msg",
        "parameter3": "image.y",
        "parameter3Type": "msg",
        "parameter4": "image.text",
        "parameter4Type": "msg",
        "parameter5": "image.maxWidth",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "image.payload",
        "sendPropertyType": "msg",
        "parameterCount": 6,
        "jimpFunction": "print",
        "selectedJimpFunction": {
            "name": "print",
            "fn": "print",
            "description": "Print text to the image",
            "parameters": [
                {
                    "name": "font|str",
                    "type": "jimpFont",
                    "required": true,
                    "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                },
                {
                    "name": "x",
                    "type": "num",
                    "required": true,
                    "hint": "x coordinate to print text"
                },
                {
                    "name": "y",
                    "type": "num",
                    "required": true,
                    "hint": "y coordinate to print text"
                },
                {
                    "name": "text",
                    "type": "str",
                    "required": true,
                    "hint": "text to print"
                },
                {
                    "name": "maxWidth",
                    "type": "num",
                    "required": false,
                    "hint": "wrap text at maxWidth"
                },
                {
                    "name": "maxHeight",
                    "type": "num",
                    "required": false,
                    "hint": "max height"
                }
            ]
        },
        "x": 2430,
        "y": 1460,
        "wires": [
            [
                "a46495b4.7ef8c8"
            ]
        ]
    },
    {
        "id": "a46495b4.7ef8c8",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "Promo 3 - Coberturas",
        "func": "msg.image.font = \"FONT_SANS_16_BLACK\";\nmsg.image.x = 121;\nmsg.image.y = 988;\n\nlet plan = msg.payload.response.planes[2];\nlet coberturas = plan.coberturas.slice(0,7);\n\n\nmsg.image.text = \"\";\ncoberturas.forEach(cobertura => {msg.image.text += cobertura + \"\\n\"} )\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2660,
        "y": 1460,
        "wires": [
            [
                "8b7593a9.6d141"
            ]
        ]
    },
    {
        "id": "8b7593a9.6d141",
        "type": "jimp-image",
        "z": "7ee549ef.0fbb28",
        "name": "Get template",
        "data": "image.payload",
        "dataType": "msg",
        "ret": "buf",
        "parameter1": "image.font",
        "parameter1Type": "msg",
        "parameter2": "image.x",
        "parameter2Type": "msg",
        "parameter3": "image.y",
        "parameter3Type": "msg",
        "parameter4": "image.text",
        "parameter4Type": "msg",
        "parameter5": "image.maxWidth",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "payload",
        "sendPropertyType": "msg",
        "parameterCount": 6,
        "jimpFunction": "print",
        "selectedJimpFunction": {
            "name": "print",
            "fn": "print",
            "description": "Print text to the image",
            "parameters": [
                {
                    "name": "font|str",
                    "type": "jimpFont",
                    "required": true,
                    "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                },
                {
                    "name": "x",
                    "type": "num",
                    "required": true,
                    "hint": "x coordinate to print text"
                },
                {
                    "name": "y",
                    "type": "num",
                    "required": true,
                    "hint": "y coordinate to print text"
                },
                {
                    "name": "text",
                    "type": "str",
                    "required": true,
                    "hint": "text to print"
                },
                {
                    "name": "maxWidth",
                    "type": "num",
                    "required": false,
                    "hint": "wrap text at maxWidth"
                },
                {
                    "name": "maxHeight",
                    "type": "num",
                    "required": false,
                    "hint": "max height"
                }
            ]
        },
        "x": 2870,
        "y": 1460,
        "wires": [
            [
                "3a08c45e.21564c"
            ]
        ]
    },
    {
        "id": "6762e117.bb8b2",
        "type": "image viewer",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "width": "400",
        "data": "image.payload",
        "dataType": "msg",
        "x": 3170,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "53d90cdb.ac7a64",
        "type": "change",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "headers.content-type",
                "pt": "msg",
                "to": "image/png",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3430,
        "y": 1460,
        "wires": [
            [
                "c13be3c5.cfa1e"
            ]
        ]
    },
    {
        "id": "920fad56.07898",
        "type": "debug",
        "z": "7ee549ef.0fbb28",
        "name": "Quotation / promos",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 1460,
        "wires": []
    },
    {
        "id": "a7347a83.df5f38",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "Promo 1 - Coberturas",
        "func": "msg.image.font = \"FONT_SANS_16_BLACK\";\nmsg.image.x = 200;\nmsg.image.y = 235;\n\n\nlet plan = msg.payload.response.planes[0];\nlet coberturas = plan.coberturas.slice(0,7);\nmsg.image.text = \"\";\n\nif (coberturas.lenght > 0) {\n   coberturas.forEach(cobertura => {msg.image.text += cobertura + \"\\n\"} ) \n}\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3100,
        "y": 1240,
        "wires": [
            [
                "7bf778c6.916268"
            ]
        ]
    },
    {
        "id": "7bf778c6.916268",
        "type": "jimp-image",
        "z": "7ee549ef.0fbb28",
        "name": "Get template",
        "data": "image.payload",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "image.font",
        "parameter1Type": "msg",
        "parameter2": "image.x",
        "parameter2Type": "msg",
        "parameter3": "image.y",
        "parameter3Type": "msg",
        "parameter4": "image.text",
        "parameter4Type": "msg",
        "parameter5": "image.maxWidth",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "image.payload",
        "sendPropertyType": "msg",
        "parameterCount": 6,
        "jimpFunction": "print",
        "selectedJimpFunction": {
            "name": "print",
            "fn": "print",
            "description": "Print text to the image",
            "parameters": [
                {
                    "name": "font|str",
                    "type": "jimpFont",
                    "required": true,
                    "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                },
                {
                    "name": "x",
                    "type": "num",
                    "required": true,
                    "hint": "x coordinate to print text"
                },
                {
                    "name": "y",
                    "type": "num",
                    "required": true,
                    "hint": "y coordinate to print text"
                },
                {
                    "name": "text",
                    "type": "str",
                    "required": true,
                    "hint": "text to print"
                },
                {
                    "name": "maxWidth",
                    "type": "num",
                    "required": false,
                    "hint": "wrap text at maxWidth"
                },
                {
                    "name": "maxHeight",
                    "type": "num",
                    "required": false,
                    "hint": "max height"
                }
            ]
        },
        "x": 3310,
        "y": 1240,
        "wires": [
            [
                "6762e117.bb8b2",
                "6025d919.3bd308"
            ]
        ]
    },
    {
        "id": "b54d7bdb.4fd988",
        "type": "http in",
        "z": "c289f04a.5490c",
        "name": "",
        "url": "policies",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 380,
        "wires": [
            [
                "eb16a25e.76f52"
            ]
        ]
    },
    {
        "id": "14dad352.640fdd",
        "type": "function",
        "z": "c289f04a.5490c",
        "name": "PSeguros IVR",
        "func": "//Guardar peticion inicial\nmsg.originalPayload = msg.payload;\n\nlet documentNumber =  msg.payload.document;\nlet policyNumber =  msg.payload.policyNumber || \"\";\n\nmsg.url = global.get(\"psegurosInfo_Url\") + `IVRPolizasVigentes/${documentNumber}/IVR/${policyNumber}?apiKey=` + global.get(\"psegurosApiKey\");\n//msg.url = `https://apimt.provinciaseguros.com.ar/gateway/PS/PS-NOVEDADES/3.0/executeDataIVR/${documento}/IVR/${policy}?apiKey=9cc893f8-c119-4eeb-8d68-a3d305927fed`;\n\nmsg.integrationPayload = msg.payload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 440,
        "y": 520,
        "wires": [
            [
                "9ff908d5.fe5878",
                "942ade3e.0b285"
            ]
        ]
    },
    {
        "id": "4e8d55de.e6cddc",
        "type": "http response",
        "z": "c289f04a.5490c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1170,
        "y": 520,
        "wires": []
    },
    {
        "id": "b9e5c7b2.524058",
        "type": "debug",
        "z": "c289f04a.5490c",
        "name": "Policies IVR Response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 420,
        "wires": []
    },
    {
        "id": "9ff908d5.fe5878",
        "type": "http request",
        "z": "c289f04a.5490c",
        "name": "PSeguros IVR",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 660,
        "y": 520,
        "wires": [
            [
                "b9e5c7b2.524058",
                "a5d45507.eb3e38"
            ]
        ]
    },
    {
        "id": "a5d45507.eb3e38",
        "type": "function",
        "z": "c289f04a.5490c",
        "name": "response",
        "func": "//log part 1\nmsg.log = {};\nmsg.log.integrationStatusCode = msg.statusCode;\nmsg.log.Response = JSON.stringify(msg.payload);\nmsg.log.integrationPayload = JSON.stringify(msg.integrationPayload)\nmsg.log.integrationResponse = JSON.stringify(msg.payload);\n\nif (msg.payload.code === 200) {\n\n    let policiesAndMenssage = {};\n    \n    if ( msg.payload.data.Polizas === undefined ) {\n        policiesAndMenssage = msg.payload.data.Mensaje;\n    } else if ( msg.payload.data.Polizas.length >= 1 ) {\n        policiesAndMenssage = msg.payload.data;\n    } else {\n        policiesAndMenssage = msg.payload.data;\n    }\n\n    msg.payload = policiesAndMenssage;\n \n} else if ( msg.payload.code === 500 ) {\n    msg.payload = \"Error intente\";\n}\n\n//log part 2\nmsg.log.origin = \"bot\";\nmsg.log.destination = \"pseguros\";\nmsg.log.action = \"Obtener polizas\";\nmsg.log.url = \"/policies\";\nmsg.log.payload = JSON.stringify(msg.originalPayload);\nmsg.log.response = JSON.stringify(msg.payload);\nmsg.log.statusCode = msg.statusCode;\nmsg.log.integrationUrl = msg.url;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 920,
        "y": 520,
        "wires": [
            [
                "4e8d55de.e6cddc",
                "61f390b8.5bad2",
                "ee3d7724.1f6848"
            ]
        ]
    },
    {
        "id": "61f390b8.5bad2",
        "type": "debug",
        "z": "c289f04a.5490c",
        "name": "Policies IVR Client Response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 440,
        "wires": []
    },
    {
        "id": "eb16a25e.76f52",
        "type": "subflow:248b9587.09adfa",
        "z": "c289f04a.5490c",
        "name": "",
        "env": [],
        "x": 220,
        "y": 460,
        "wires": [
            [
                "14dad352.640fdd"
            ]
        ]
    },
    {
        "id": "942ade3e.0b285",
        "type": "debug",
        "z": "c289f04a.5490c",
        "name": "Policies IVR",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 420,
        "wires": []
    },
    {
        "id": "ad5b32df.f4449",
        "type": "http in",
        "z": "c289f04a.5490c",
        "name": "",
        "url": "/policy/pdf",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 660,
        "wires": [
            [
                "c246f0ac.963e"
            ]
        ]
    },
    {
        "id": "174573da.67b78c",
        "type": "http request",
        "z": "c289f04a.5490c",
        "name": "",
        "method": "GET",
        "ret": "bin",
        "paytoqs": "query",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 750,
        "y": 780,
        "wires": [
            [
                "4d4e633e.5b907c",
                "1ce8000f.f7e59"
            ]
        ]
    },
    {
        "id": "b0fd4016.15baf",
        "type": "http response",
        "z": "c289f04a.5490c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1210,
        "y": 740,
        "wires": []
    },
    {
        "id": "6367258a.5b243c",
        "type": "function",
        "z": "c289f04a.5490c",
        "name": "PS Poliza en PDF",
        "func": "//Guardar peticion inicial\nmsg.originalPayload = msg.payload;\n\nlet policy =  msg.payload.policy\nmsg.policy = policy;\n\n\nlet branch = msg.payload.branch\nlet ramo = msg.payload.ramo\n\n/*al usar el numero de cotizacion en la url pasa a ser string y es\n necesario que valla en el payload como numero para que\n el servicio de provincia no de error\n*/\n\n\n//TODO: Harcode, hasta tener polizas\n//policy = \"9427912\";\n \n//Number(policy)\n\n//msg.url =  `https://apimt.provinciaseguros.com.ar/gateway/PS/PS-NOVEDADES/3.0/obtenerPdf/1/4/${policy}/0?apiKey=9cc893f8-c119-4eeb-8d68-a3d305927fed`;\nmsg.url = global.get(\"psegurosNovedades_Url\") + `obtenerPdfPS/${branch}/${ramo}/${policy}/0?apiKey=` + global.get(\"psegurosApiKey\");\n\n\nmsg.integrationPayload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 490,
        "y": 760,
        "wires": [
            [
                "174573da.67b78c",
                "d9249bee.427018"
            ]
        ]
    },
    {
        "id": "4d4e633e.5b907c",
        "type": "function",
        "z": "c289f04a.5490c",
        "name": "response",
        "func": "//log part 1\nmsg.log = {};\nmsg.log.integrationStatusCode = msg.statusCode;\nmsg.log.integrationPayload = JSON.stringify(msg.integrationPayload);\nmsg.log.integrationResponse = JSON.stringify(msg.payload);\nmsg.log.integrationUrl = msg.url\n//  en caso de no haber error devuelve la poliza\n\nif (msg.statusCode === 200) {\n\n    msg.headers = {};\n    msg.headers[\"content-Disposition\"] = ` attachment; filename=\"PSeguros - Poliza digital - ${msg.policy}.pdf\"`\n    msg.headers[\"content-type\"] = \"application/pdf\";\n    \n    msg.statusCode = 200\n\n} else {\n    \n    msg.statusCode = 500;\n}\n\n\n//log part 2\nmsg.log.origin = \"bot\";\nmsg.log.destination = \"pseguros\";\nmsg.log.action = \"Obtener pdf poliza\";\nmsg.log.url = \"/policy/pdf\";\nmsg.log.payload = JSON.stringify(msg.originalPayload);\nmsg.log.response = JSON.stringify(msg.payload);\nmsg.log.statusCode = msg.statusCode;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 980,
        "y": 780,
        "wires": [
            [
                "b0fd4016.15baf",
                "9fe5c267.c8a94"
            ]
        ]
    },
    {
        "id": "d9249bee.427018",
        "type": "debug",
        "z": "c289f04a.5490c",
        "name": "Policy PDF",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 700,
        "wires": []
    },
    {
        "id": "c246f0ac.963e",
        "type": "subflow:248b9587.09adfa",
        "z": "c289f04a.5490c",
        "name": "",
        "env": [],
        "x": 240,
        "y": 760,
        "wires": [
            [
                "6367258a.5b243c"
            ]
        ]
    },
    {
        "id": "1ce8000f.f7e59",
        "type": "debug",
        "z": "c289f04a.5490c",
        "name": "Policy PDF Response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 700,
        "wires": []
    },
    {
        "id": "ea9b595a.894628",
        "type": "subflow:248b9587.09adfa",
        "z": "c289f04a.5490c",
        "name": "",
        "env": [],
        "x": 360,
        "y": 240,
        "wires": [
            [
                "c8b8e4d.48c7818"
            ]
        ]
    },
    {
        "id": "c8b8e4d.48c7818",
        "type": "function",
        "z": "c289f04a.5490c",
        "name": "PSeguros IVR",
        "func": "//LOG: Guardar peticion inicial \nmsg.originalPayload = msg.payload;\n\nlet documentNumber =  msg.payload.document;\nlet policyNumber =  msg.payload.policyNumber || \"\";\n\nmsg.url = global.get(\"psegurosInfo_Url\") + `IVRPolizasVigentes/${documentNumber}/IVR/${policyNumber}?apiKey=` + global.get(\"psegurosApiKey\");\n\n//msg.url = `https://apimt.provinciaseguros.com.ar/gateway/PS/PS-NOVEDADES/3.0/executeDataIVR/${documento}/IVR/${policy}?apiKey=9cc893f8-c119-4eeb-8d68-a3d305927fed`;\n\nmsg.integrationPayload = msg.payload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 580,
        "y": 300,
        "wires": [
            [
                "17f0bcf.dde0943"
            ]
        ]
    },
    {
        "id": "17f0bcf.dde0943",
        "type": "http request",
        "z": "c289f04a.5490c",
        "name": "PSeguros IVR",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 800,
        "y": 300,
        "wires": [
            [
                "29293e6c.f68602",
                "92f9acbc.4b99d"
            ]
        ]
    },
    {
        "id": "92f9acbc.4b99d",
        "type": "debug",
        "z": "c289f04a.5490c",
        "name": "Cliente polizas",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 160,
        "wires": []
    },
    {
        "id": "d9ccb293.6a787",
        "type": "debug",
        "z": "c289f04a.5490c",
        "name": "Cliente polizas response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 160,
        "wires": []
    },
    {
        "id": "bdeace24.7387a",
        "type": "http in",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "url": "/civilState/:Status",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 3580,
        "wires": [
            [
                "24a9949.452336c"
            ]
        ]
    },
    {
        "id": "8661ce55.79a41",
        "type": "http request",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 750,
        "y": 3680,
        "wires": [
            [
                "c9faf2a7.c32bd",
                "3f8b7eec.a50e72"
            ]
        ]
    },
    {
        "id": "5480fade.c34d94",
        "type": "http response",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1130,
        "y": 3680,
        "wires": []
    },
    {
        "id": "87465cab.c6bc2",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "PS Estado Civil",
        "func": "msg.searchCriteria = msg.req.params.Status; \n\n//msg.url =  'https://apimt.provinciaseguros.com.ar/gateway/PS/PS-EMISION/1.1/info/estadoCivil?apikey=9cc893f8-c119-4eeb-8d68-a3d305927fed';\nmsg.url = global.get(\"psegurosEmision_Url\") + `info/estadoCivil?apikey` + global.get(\"psegurosApiKey\");\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 520,
        "y": 3680,
        "wires": [
            [
                "8661ce55.79a41"
            ]
        ]
    },
    {
        "id": "c9faf2a7.c32bd",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "response",
        "func": "let civilStates = JSON.parse(msg.payload);\nlet searchCriteria = msg.searchCriteria;\nvar result = []\n\ncivilStates.forEach(state => {\n    if (state.descripcion.toLowerCase().includes(searchCriteria.toLowerCase()))\n        result.push(state);\n})\n\n\n\n\n\n\nmsg.payload = result;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 960,
        "y": 3680,
        "wires": [
            [
                "5480fade.c34d94"
            ]
        ]
    },
    {
        "id": "24a9949.452336c",
        "type": "subflow:248b9587.09adfa",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "env": [],
        "x": 300,
        "y": 3680,
        "wires": [
            [
                "87465cab.c6bc2"
            ]
        ]
    },
    {
        "id": "cebe7115.6733",
        "type": "debug",
        "z": "7ee549ef.0fbb28",
        "name": "Localidades RESPONSE",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 3020,
        "wires": []
    },
    {
        "id": "89741a05.1fd498",
        "type": "debug",
        "z": "7ee549ef.0fbb28",
        "name": "Nacionalidad",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 3520,
        "wires": []
    },
    {
        "id": "3f8b7eec.a50e72",
        "type": "debug",
        "z": "7ee549ef.0fbb28",
        "name": "Civil state response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 3620,
        "wires": []
    },
    {
        "id": "4a29f00a.fca52",
        "type": "function-npm",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "func": "const {distance, closest} = require('fastest-levenshtein');\n\ntry {\n    let nationalities = msg.payload\n    var searchCriteria = msg.searchCriteria;\n    var results = [];\n\n    nationalities.forEach(nationality => {\n        \n        let dist = distance(searchCriteria.toLowerCase(), nationality.descripcion.toLowerCase().replace(/ /g, ''));\n        results.push({dist, nationality});\n    }) \n\n   \n    //Algoritmo para ordenar\n    msg.results = results.sort((a,b) => (a.dist > b.dist) ? 1 : ((b.dist > a.dist) ? -1 : 0));\n    \n    //Devuelvo mejor resultado\n    msg.payload = results[0];\n    \n   \n    return msg;\n\n}catch (exception) {\n    node.error([\"Error\", exception])\n}\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1030,
        "y": 3460,
        "wires": [
            [
                "5688af64.2d693",
                "a6931131.fd1c9"
            ]
        ]
    },
    {
        "id": "274f5664.3e5a5a",
        "type": "function-npm",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "func": "const {distance, closest} = require('fastest-levenshtein');\n\nlet state = msg.req.params.state\n\n//Si encontre localidades o es Capital Federal\nif(msg.statusCode == 200 || state == 1) {\n    \n    try {\n        let locations = msg.payload\n        var searchCriteria = msg.searchCriteria;\n        var results = [];\n    \n        //NO acepta LOCALIDADES de CABA\n        if (state != 1) {\n        \n            locations.forEach(location => {\n                let dist = distance(searchCriteria.toLowerCase(), location.localidad.toLowerCase().replace(/ /g, ''));\n                results.push({dist, location});\n            }) \n            \n        } else {\n                \n            let locationTemp = {};\n            locationTemp.dist = 0;\n            \n            locationTemp.location = {};\n            locationTemp.location.localidad = \"Capital Federal\"\n            \n            msg.statusCode = 200;\n        \n            results.push(locationTemp)\n        }\n    \n       \n        //Algoritmo para ordenar\n        msg.results = results.sort((a,b) => (a.dist > b.dist) ? 1 : ((b.dist > a.dist) ? -1 : 0));\n        \n        //Devuelvo mejor resultado\n    msg.payload = results;\n    \n    }catch (exception) {\n        node.error([\"Error\", exception])\n    }\n    \n} else {\n    \n    //No se encontraron localidades\n    \n}\n\n\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1010,
        "y": 3180,
        "wires": [
            [
                "d40757fd.b1bfa8",
                "4f32083.a11def8"
            ]
        ]
    },
    {
        "id": "7e5770fc.f51f5",
        "type": "http in",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "url": "coverage/:quotationNumber/:plan/:promo",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 230,
        "y": 3800,
        "wires": [
            [
                "44f6d34a.9fdf2c"
            ]
        ]
    },
    {
        "id": "5b74b241.41413c",
        "type": "http request",
        "z": "7ee549ef.0fbb28",
        "name": "PS Detalle de Planes",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 760,
        "y": 3880,
        "wires": [
            [
                "ec019244.9faf1"
            ]
        ]
    },
    {
        "id": "a943e919.172e58",
        "type": "http response",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1170,
        "y": 3880,
        "wires": []
    },
    {
        "id": "44f6d34a.9fdf2c",
        "type": "subflow:248b9587.09adfa",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "env": [],
        "x": 220,
        "y": 3880,
        "wires": [
            [
                "959f0515.d044a8"
            ]
        ]
    },
    {
        "id": "959f0515.d044a8",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "PS Detalle de Planes",
        "func": "let quotationNumber = msg.req.params.quotationNumber;\nlet plan = msg.req.params.plan;\nlet promo = msg.req.params.promo;\n\n//msg.url = `https://apimt.provinciaseguros.com.ar/gateway/PS/PS-COTIZACION/2.2/detallePlan/${quotationNumber}/${plan}/${promo}?apikey=9cc893f8-c119-4eeb-8d68-a3d305927fed`;\nmsg.url = global.get(\"psegurosCotizacion_Url\") + `detallePlan/${quotationNumber}/${plan}/${promo}?apikey=` + global.get(\"psegurosApiKey\");\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 500,
        "y": 3880,
        "wires": [
            [
                "5b74b241.41413c"
            ]
        ]
    },
    {
        "id": "ec019244.9faf1",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "response",
        "func": "var details = msg.payload;\nvar coverage = [];\n\ndetails.forEach(item => {\n    coverage.push(item.cobertura)\n})\n\n\n\nmsg.payload = coverage \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1000,
        "y": 3880,
        "wires": [
            [
                "a943e919.172e58"
            ]
        ]
    },
    {
        "id": "20dcaa8f.71e1a6",
        "type": "jimp-image",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "data": "payload",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "",
        "parameter1Type": "msg",
        "parameter2": "",
        "parameter2Type": "msg",
        "parameter3": "",
        "parameter3Type": "msg",
        "parameter4": "",
        "parameter4Type": "msg",
        "parameter5": "",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "payload",
        "sendPropertyType": "msg",
        "parameterCount": 0,
        "jimpFunction": "none",
        "selectedJimpFunction": {
            "name": "none",
            "fn": "none",
            "description": "Just loads the image.",
            "parameters": []
        },
        "x": 1740,
        "y": 1620,
        "wires": [
            []
        ]
    },
    {
        "id": "7a9e0986.28ebd8",
        "type": "Stackhero-MySQL",
        "z": "5eeb304d.24308",
        "server": "6e3cb7e8.3326f8",
        "name": "",
        "x": 510,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "e3be7340.0049c",
        "type": "function",
        "z": "5eeb304d.24308",
        "name": "Payload Log",
        "func": "//msg.topic = 'INSERT INTO `MindbotLog`.`Message` (`chatId`, `topic`, `channel`, `departmentId`, `inbound`, `from_Id`, `from_Token`, `from_FullName`, `from_UserName`, `from_MessageType`, `from_Message`, `chat_Context`, `failStatus`) VALUES (:chatId, :topic, :channel, :departmentId, :inbound, :from_id, :from_Token, :from_FullName, :from_UserName, :from_MessageType, :from_Message, :chat_Context, :failStatus)';\nmsg.topic = 'INSERT INTO `MindbotLog`.`Service` (`origin`, `destination`, `action`, `url`, `payload`, `response`, `statusCode`, `integrationUrl`, `integrationPayload`, `integrationStatusCode`, `integrationResponse`) VALUES (:origin, :destination, :action, :url, :payload, :response, :statusCode, :integrationUrl, :integrationPayload, :integrationStatusCode, :integrationResponse)';\n\nvar payload = msg.log;\n\n//guardar numero de tarjeta de credito con \"*\"\nconst CREDITCARDI = /^(559198|527104|510541|406344)[0-9]{10}/;\nconst CREDITCARDII = /^(36093)[0-9]{8}/;\nconst CREDITCARDIII = /^(4|5)[0-9]{15}/;\nconst CREDITCARDIV = /^(|5895|4029|5275){12}/;\nconst CREDITCARDV = /^(37){13}/;\nconst allNumber = /^[0-9]+$/;\nlet longitud = payload.payload.length;\nlet checkCreditCard = payload.payload.toString();\nif( allNumber.test(checkCreditCard) && (CREDITCARDI.test(checkCreditCard) || CREDITCARDII.test(checkCreditCard) || CREDITCARDIII.test(checkCreditCard) || CREDITCARDIV.test(checkCreditCard) || CREDITCARDV.test(checkCreditCard))){\n    startWith = checkCreditCard.substring(0,4);\n    middle = checkCreditCard.substring(4, longitud-2).replace(/[0-9]/g, \"*\");\n    endWith = checkCreditCard.substring(longitud -2, longitud);\n    var saveNumber = startWith + middle + endWith;\n    payload.payload = saveNumber;\n    node.warn(\"credit card \" + saveNumber);\n}\n\n\nmsg.payload = {\n    origin: payload.origin,\n    destination: payload.destination,\n    action: payload.action,\n    url: payload.url,\n    payload: payload.payload,\n    response: payload.response,\n    statusCode: payload.statusCode,\n    integrationUrl: payload.integrationUrl,\n    integrationPayload: payload.integrationPayload,\n    integrationStatusCode: payload.integrationStatusCode,\n    integrationResponse: payload.integrationResponse\n}\n\n\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 290,
        "y": 140,
        "wires": [
            [
                "7a9e0986.28ebd8",
                "5a334e.a263ccb4"
            ],
            []
        ]
    },
    {
        "id": "f79443e7.a7451",
        "type": "link in",
        "z": "5eeb304d.24308",
        "name": "LOG-In",
        "links": [
            "c414dfa3.0cddc",
            "ee3d7724.1f6848",
            "9fe5c267.c8a94",
            "20f274a.837d28c",
            "52eab443.e0591c",
            "5bd5dd48.a4d074",
            "e777efe4.12ca9",
            "ae150c49.17bdc",
            "1c0df8fe.451227"
        ],
        "x": 115,
        "y": 140,
        "wires": [
            [
                "e3be7340.0049c",
                "4da635a7.6ceaac"
            ]
        ]
    },
    {
        "id": "4da635a7.6ceaac",
        "type": "debug",
        "z": "5eeb304d.24308",
        "name": "LOG-IN",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 250,
        "y": 80,
        "wires": []
    },
    {
        "id": "5a334e.a263ccb4",
        "type": "debug",
        "z": "5eeb304d.24308",
        "name": "LOG-Payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 80,
        "wires": []
    },
    {
        "id": "c414dfa3.0cddc",
        "type": "link out",
        "z": "c289f04a.5490c",
        "name": "",
        "links": [
            "f79443e7.a7451"
        ],
        "x": 1175,
        "y": 360,
        "wires": []
    },
    {
        "id": "fd2ac7a.f2ef438",
        "type": "comment",
        "z": "c289f04a.5490c",
        "name": "Respuesta + LOG",
        "info": "",
        "x": 1040,
        "y": 260,
        "wires": []
    },
    {
        "id": "d92a097c.1c4958",
        "type": "comment",
        "z": "c289f04a.5490c",
        "name": "LOG",
        "info": "",
        "x": 1250,
        "y": 360,
        "wires": []
    },
    {
        "id": "ee3d7724.1f6848",
        "type": "link out",
        "z": "c289f04a.5490c",
        "name": "LOG",
        "links": [
            "f79443e7.a7451"
        ],
        "x": 1085,
        "y": 600,
        "wires": []
    },
    {
        "id": "9fe5c267.c8a94",
        "type": "link out",
        "z": "c289f04a.5490c",
        "name": "LOG",
        "links": [
            "f79443e7.a7451"
        ],
        "x": 1175,
        "y": 820,
        "wires": []
    },
    {
        "id": "20f274a.837d28c",
        "type": "link out",
        "z": "7ee549ef.0fbb28",
        "name": "LOG",
        "links": [
            "f79443e7.a7451"
        ],
        "x": 1265,
        "y": 660,
        "wires": []
    },
    {
        "id": "52eab443.e0591c",
        "type": "link out",
        "z": "7ee549ef.0fbb28",
        "name": "LOG",
        "links": [
            "f79443e7.a7451"
        ],
        "x": 1195,
        "y": 1140,
        "wires": []
    },
    {
        "id": "5bd5dd48.a4d074",
        "type": "link out",
        "z": "7ee549ef.0fbb28",
        "name": "LOG",
        "links": [
            "f79443e7.a7451"
        ],
        "x": 1125,
        "y": 1740,
        "wires": []
    },
    {
        "id": "e777efe4.12ca9",
        "type": "link out",
        "z": "7ee549ef.0fbb28",
        "name": "LOG",
        "links": [
            "f79443e7.a7451"
        ],
        "x": 1225,
        "y": 2280,
        "wires": []
    },
    {
        "id": "ae150c49.17bdc",
        "type": "link out",
        "z": "7ee81df4.bfea84",
        "name": "LOG",
        "links": [
            "f79443e7.a7451"
        ],
        "x": 3075,
        "y": 1060,
        "wires": []
    },
    {
        "id": "1c0df8fe.451227",
        "type": "link out",
        "z": "7ee81df4.bfea84",
        "name": "LOG",
        "links": [
            "f79443e7.a7451"
        ],
        "x": 1615,
        "y": 1640,
        "wires": []
    },
    {
        "id": "14526157.243fef",
        "type": "function",
        "z": "7ee81df4.bfea84",
        "name": "create log",
        "func": "msg.log = {};\nmsg.log.origin =  msg.payload.messages[0].username;\nmsg.log.destination = msg.payload.visitor.token;\nmsg.log.action = \"respuesta\";\nmsg.log.url = msg.req.url;\nmsg.log.payload = msg.payload.messages[0].msg;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 500,
        "y": 1480,
        "wires": [
            [
                "e6c9b776.ae6b68"
            ]
        ]
    },
    {
        "id": "d151ab7.6ff6d58",
        "type": "comment",
        "z": "7ee81df4.bfea84",
        "name": "save log",
        "info": "",
        "x": 3160,
        "y": 1060,
        "wires": []
    },
    {
        "id": "a370c2bf.6c176",
        "type": "inject",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1330,
        "y": 1720,
        "wires": [
            [
                "cb60e808.070408"
            ]
        ]
    },
    {
        "id": "cb60e808.070408",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "func": "msg.topic = \"Hola desde Node-Red\";\n\nlet dato = \"Un dato curioso...\";\n\nmsg.payload = `Node-Red Email\nSalto de linea\n${dato}\nAdios\n`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1480,
        "y": 1720,
        "wires": [
            [
                "dc58742f.f2bfb8"
            ]
        ]
    },
    {
        "id": "c87703da.7e2e9",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "Enviar email",
        "func": "let bodyEmision = msg.integrationPayload;\nlet originalPayload = msg.originalPayload;\n\nlet clienteCompleto = `${bodyEmision.datosTomador.nombre} ${bodyEmision.datosTomador.apellido} ${bodyEmision.datosTomador.tipoDocumento} ${bodyEmision.datosTomador.documento}`;\nlet canal = `WHATSAPP`;\nlet estadoInterfaz = msg.statusCode == 200 ? \"OK\" : \"CON ERRORES\";\n\nlet ceroKMConvert= originalPayload.okm == true ? \"S\" : \"N\";\n\nlet today = new Date();\nlet fecha = String(today.getDate()).padStart(2,'0') + \"/\" + String(today.getMonth() +1).padStart(2, '0') + \"/\" + today.getFullYear();\nlet horario = today.getHours() + \":\" + today.getMinutes() + \":\" +  today.getSeconds();\nvar fechaCorrecta = fecha + \" \" + horario;\n\n// Esteban Agrega aca 29/03/21\n\nnode.warn([\"EK-playload-observations: \"]  + msg.payload.observations);\nnode.warn([\"EK-payload-description: \"]  + msg.payload.description);\nnode.warn([\"EK-bodyEmision: \"] + bodyEmision);\nif (msg.statusCode == 200)\n{\n    // OKAY\n    node.warn([\"EKstatusCode: \"]  + msg.statusCode);\n    msg.topic = `Controlar / Emitir poliza - Generado en: OMNICANALIDAD - ${canal}`;\n    \n    msg.payload = `Buenos días\n    \nSe ha recibido una solicitud de emisión  a través del cotizador de OMNICANALIDAD - ${canal}, que requiere verificación para completar la operación.  \n\nLos datos de la propuesta son:\n\n>>Nombre: [${bodyEmision.datosTomador.nombre}]\n>>Apellido: [${bodyEmision.datosTomador.apellido}]\n>>DNI: [${bodyEmision.datosTomador.documento}]\n>>Mail: [${bodyEmision.datosTomador.email}]\n>>Telefono: [${bodyEmision.datosTomador.telefono}]\n>>Celular: [${bodyEmision.datosTomador.telefono}]\n>>Cotizacion: [${bodyEmision.cotizacion}]\n>>Ramo: [4][Automotores]\n>>Proceso de control: [ ]\n>>Fecha: [${fechaCorrecta}]\n>>Marca: [${originalPayload.brand}]\n>>Modelo: [${originalPayload.modelCode} ${originalPayload.model}]\n>>Año de fabricación: [${originalPayload.year}]\n>>0KM: [${ceroKMConvert}]\n>>Patente: [${bodyEmision.bien['40023_patente']}]\n>>Codigo postal: [${originalPayload.zipCode}]\n>>Plan seleccionado: [${bodyEmision.plan}] \n: [${originalPayload.planDescripcion}]\n>>Estado de la interface: [${estadoInterfaz}]\n\nGracias\n`;\n    \n}\nelse if (msg.statusCode == 401)\n{ \n    // Errore de Token no deberia pasar nada\n}\nelse if (msg.statusCode == 400)\n{ \n // Otros errores\n        node.warn([\"EK-400-Error-Detect: \"]  + msg.statusCode);\n        msg.topic = `Controlar / Emitir poliza - Generado en: OMNICANALIDAD - ${canal}`;\n            \n        msg.payload = `Buenos días\n    \nSe ha recibido una solicitud de emisión  a través del cotizador de OMNICANALIDAD - ${canal}, que requiere verificación para completar la operación.  \n\nLos datos de la propuesta son:\n\n>>Nombre: [${bodyEmision.datosTomador.nombre}]\n>>Apellido: [${bodyEmision.datosTomador.apellido}]\n>>DNI: [${bodyEmision.datosTomador.documento}]\n>>Mail: [${bodyEmision.datosTomador.email}]\n>>Telefono: [${bodyEmision.datosTomador.telefono}]\n>>Celular: [${bodyEmision.datosTomador.telefono}]\n>>Cotizacion: [${bodyEmision.cotizacion}]\n>>Ramo: [4][Automotores]\n>>Proceso de control: [ ]\n>>Fecha: [${fechaCorrecta}]\n>>Marca: [${originalPayload.brand}]\n>>Modelo: [${originalPayload.modelCode} ${originalPayload.model}]\n>>Año de fabricación: [${originalPayload.year}]\n>>0KM: [${ceroKMConvert}]\n>>Patente: [${bodyEmision.bien['40023_patente']}]\n>>Codigo postal: [${originalPayload.zipCode}]\n>>Plan seleccionado: [${bodyEmision.plan}] \n: [${originalPayload.planDescripcion}]\n>>Estado de la interface: [${estadoInterfaz}]\n\nGracias\n`;\n}\nelse // Allways statusCode 500\n{\n    //Movido aca para error 500\n    let strCESVISearch = msg.payload.observations.toLowerCase() ;\n    node.warn([\"EK-CESVI-Detect: \"]  + strCESVISearch);\n    // CON ERRORES\n    if (strCESVISearch.includes(\"cesvi\"))\n    {\n        // CESVI DETECT\n        node.warn([\"EK-CESVI-Detect: \"]  + msg.statusCode);\n         msg.topic = `Controlar CESVI Falla - ${bodyEmision.datosTomador.nombre}  ${bodyEmision.datosTomador.apellido} DNI ${bodyEmision.datosTomador.documento} Generado en: OMNICANALIDAD - ${canal}`;\n        msg.payload = `Buenos días\n    \nSe ha recibido una solicitud de emisión a través del cotizador de OMNICANALIDAD - ${canal}, que requiere verificación para completar la operación. \n\nLos datos de la propuesta son:\n\n>>Nombre: [${bodyEmision.datosTomador.nombre}]\n>>Apellido: [${bodyEmision.datosTomador.apellido}]\n>>fechaNacimiento: [${bodyEmision.datosTomador.fechaNacimiento}]\n>>Codigo postal: [${originalPayload.zipCode}]\n>>Localidad: [${bodyEmision.datosTomador.localidad}]\n>>Provincia: [${bodyEmision.datosTomador.provincia}]\n>>Calle: [${bodyEmision.datosTomador.calle}]\n>>depto: [${bodyEmision.datosTomador.departamento}]\n>>nroCalle: [${bodyEmision.datosTomador.calle}]\n>>piso: [${bodyEmision.datosTomador.piso}]\n>>nacionalidad: [${bodyEmision.datosTomador.lugarNacimiento}]\n>>sexo: [${bodyEmision.datosTomador.genero}]\n>>profesion: [${bodyEmision.datosTomador.profesion}]\n>>estadoCivil: [${bodyEmision.datosTomador.estadoCivil}]\n>>medioDelPago: [${bodyEmision.medioDePago}]\n>>origenDelPago: [${bodyEmision.origenDePago}]\n>>cbuOTarjeta: [${bodyEmision.datosTomador.datosBancarios}]\n>>tipoTarjeta: [${bodyEmision.origenDePago}]\n>>tipoDoc: [${bodyEmision.datosTomador.tipoDocumento}]\n>>cuit: [${bodyEmision.datosTomador.cuitCuil}]\n>>DNI: [${bodyEmision.datosTomador.documento}]\n>>Mail: [${bodyEmision.datosTomador.email}]\n>>Telefono: [${bodyEmision.datosTomador.telefono}]\n>>Celular: [${bodyEmision.datosTomador.telefono}]\n>>Cotizacion: [${bodyEmision.cotizacion}]\n>>Ramo: [4][Automotores]\n>>Proceso de control: [ ]\n>>Fecha: [${new Date().toString(\"dd/MM/yyyy hh:mm:ss\")}]\n>>Marca: [${originalPayload.brand}]\n>>Modelo: [${originalPayload.modelCode} ${originalPayload.model}]\n>>Año de fabricación: [${originalPayload.year}]\n>>0KM: [${ceroKMConvert}]\n>>Patente: [${bodyEmision.bien['40023_patente']}]\n>>Motor: [${bodyEmision.bien['40005_numeroMotor']}]\n>>Chasis: [${bodyEmision.bien['40004_numeroChasis']}]\n>>Codigo postal: [${originalPayload.zipCode}]\n>>Plan seleccionado: [${bodyEmision.plan}] : [${originalPayload.planDescripcion}]\n\nGracias\n`;\n    }\n    else if (strCESVISearch==\"\")//.includes(\"condiciones de los bienes incluidos en la propuesta\"))\n    {\n           // Se registran observaciones en la cotización. La misma quedará en poder de un operador de Provincia Seguros que efectuará el análisis correspondiente para proceder a su emisión\n        node.warn([\"EK-500InspeccionGenerada-Detect: \"]  + msg.statusCode);\n        msg.topic = `Controlar / Emitir poliza - Generado en: OMNICANALIDAD - ${canal}`;\n            \n        msg.payload = `Buenos días\n    \nSe ha recibido una solicitud de emisión  a través del cotizador de OMNICANALIDAD - ${canal}, que requiere verificación para completar la operación.  \n\nLos datos de la propuesta son:\n\n>>Nombre: [${bodyEmision.datosTomador.nombre}]\n>>Apellido: [${bodyEmision.datosTomador.apellido}]\n>>DNI: [${bodyEmision.datosTomador.documento}]\n>>Mail: [${bodyEmision.datosTomador.email}]\n>>Telefono: [${bodyEmision.datosTomador.telefono}]\n>>Celular: [${bodyEmision.datosTomador.telefono}]\n>>Cotizacion: [${bodyEmision.cotizacion}]\n>>Ramo: [4][Automotores]\n>>Proceso de control: [ ]\n>>Fecha: [${fechaCorrecta}]\n>>Marca: [${originalPayload.brand}]\n>>Modelo: [${originalPayload.modelCode} ${originalPayload.model}]\n>>Año de fabricación: [${originalPayload.year}]\n>>0KM: [${ceroKMConvert}]\n>>Patente: [${bodyEmision.bien['40023_patente']}]\n>>Codigo postal: [${originalPayload.zipCode}]\n>>Plan seleccionado: [${bodyEmision.plan}] \n: [${originalPayload.planDescripcion}]\n>>Estado de la interface:  Por condiciones del bien - Requiere Proceso por Operador  //[${estadoInterfaz}]\n\nGracias\n`;\n        \n    }\n    else  \n    {\n        // Otros errores\n        node.warn([\"EK-ERROtros-Detect: \"]  + msg.statusCode);\n        msg.topic = `Controlar / Emitir poliza - Generado en: OMNICANALIDAD - ${canal}`;\n            \n        msg.payload = `Buenos días\n    \nSe ha recibido una solicitud de emisión  a través del cotizador de OMNICANALIDAD - ${canal}, que requiere verificación para completar la operación.  \n\nLos datos de la propuesta son:\n\n>>Nombre: [${bodyEmision.datosTomador.nombre}]\n>>Apellido: [${bodyEmision.datosTomador.apellido}]\n>>DNI: [${bodyEmision.datosTomador.documento}]\n>>Mail: [${bodyEmision.datosTomador.email}]\n>>Telefono: [${bodyEmision.datosTomador.telefono}]\n>>Celular: [${bodyEmision.datosTomador.telefono}]\n>>Cotizacion: [${bodyEmision.cotizacion}]\n>>Ramo: [4][Automotores]\n>>Proceso de control: [ ]\n>>Fecha: [${fechaCorrecta}]\n>>Marca: [${originalPayload.brand}]\n>>Modelo: [${originalPayload.modelCode} ${originalPayload.model}]\n>>Año de fabricación: [${originalPayload.year}]\n>>0KM: [${ceroKMConvert}]\n>>Patente: [${bodyEmision.bien['40023_patente']}]\n>>Codigo postal: [${originalPayload.zipCode}]\n>>Plan seleccionado: [${bodyEmision.plan}] \n: [${originalPayload.planDescripcion}]\n>>Estado de la interface: [${estadoInterfaz}]\n\nGracias\n`;\n    }\n}\n\nnode.warn([\"EK-Mensaje2Send: \"]  +  msg.payload);\n\n\n\n// Fin Agrega\n\n\n\n//msg.topic = `Controlar / Emitir poliza - Generado en: OMNICANALIDAD - ${canal} - ${clienteCompleto}`;\n\n\n//msg.payload = `Buenos días\n//Se ha recibido una solicitud de emisión a través del cotizador de cliente final, que requiere verificación para completar la operación.  \n\n//Nombre: ${bodyEmision.datosTomador.nombre}\n////Apellido: ${bodyEmision.datosTomador.apellido}\n//DNI: ${bodyEmision.datosTomador.documento}\n//Mail: ${bodyEmision.datosTomador.email}\n//Telefono: ${bodyEmision.datosTomador.telefono}\n//Celular: ${bodyEmision.datosTomador.telefono}\n//Cotizacion: ${bodyEmision.cotizacion}\n//Ramo: 4 - Automotores\n//Proceso de control: \n//Fecha: ${new Date().toString(\"dd/MM/yyyy\")}\n//Marca: ${originalPayload.brand}\n//Modelo: ${originalPayload.model}\n//Año de fabricación: ${originalPayload.year}\n//0KM: ${originalPayload.okm}\n//Patente: ${bodyEmision.bien['40023_patente']}\n//Codigo postal: ${originalPayload.zipCode}\n//Plan seleccionado: ${bodyEmision.plan} - ${originalPayload.planDescripcion}\n//Estado de la interface: ${estadoInterfaz}\n//`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1130,
        "y": 1900,
        "wires": [
            [
                "66a275c3.95d69c"
            ]
        ]
    },
    {
        "id": "66a275c3.95d69c",
        "type": "e-mail",
        "z": "7ee549ef.0fbb28",
        "server": "${email_Server}",
        "port": "${email_Port}",
        "secure": false,
        "tls": false,
        "name": "${email_To}",
        "dname": "",
        "x": 1310,
        "y": 1900,
        "wires": []
    },
    {
        "id": "dc58742f.f2bfb8",
        "type": "e-mail",
        "z": "7ee549ef.0fbb28",
        "server": "${email_Server}",
        "port": "${email_Port}",
        "secure": false,
        "tls": false,
        "name": "${email_To}",
        "dname": "",
        "x": 1690,
        "y": 1720,
        "wires": []
    },
    {
        "id": "c33061ab.86b2c",
        "type": "comment",
        "z": "7ee549ef.0fbb28",
        "name": "Test",
        "info": "",
        "x": 1520,
        "y": 580,
        "wires": []
    },
    {
        "id": "218e7dbe.bb3252",
        "type": "debug",
        "z": "7ee549ef.0fbb28",
        "name": "model filtered",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 720,
        "wires": []
    },
    {
        "id": "cfb28d6d.168e4",
        "type": "http in",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "url": "locationStreet/:zipCode",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 240,
        "y": 4080,
        "wires": [
            [
                "ce0637d.b3453c8"
            ]
        ]
    },
    {
        "id": "bf7bf4fa.a60d18",
        "type": "http response",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1200,
        "y": 4180,
        "wires": []
    },
    {
        "id": "ce0637d.b3453c8",
        "type": "subflow:248b9587.09adfa",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "env": [],
        "x": 260,
        "y": 4180,
        "wires": [
            [
                "56a5022b.2a307c"
            ]
        ]
    },
    {
        "id": "eb5cb6c9.434b68",
        "type": "http request",
        "z": "7ee549ef.0fbb28",
        "name": "PS Locaclides y Calles",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 800,
        "y": 4180,
        "wires": [
            [
                "d83c76be.9fba38"
            ]
        ]
    },
    {
        "id": "56a5022b.2a307c",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "PS Locaclides y Calles",
        "func": "let zipCode = msg.req.params.zipCode;\n\nmsg.url = global.get(\"psegurosEmision_Url\") + `info/localidadesCalles/${zipCode}?apikey=` + global.get(\"psegurosApiKey\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 560,
        "y": 4180,
        "wires": [
            [
                "eb5cb6c9.434b68"
            ]
        ]
    },
    {
        "id": "d83c76be.9fba38",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "Response",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1020,
        "y": 4180,
        "wires": [
            [
                "bf7bf4fa.a60d18"
            ]
        ]
    },
    {
        "id": "a17bc848.d98238",
        "type": "http in",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "url": "locationStreet/:zipCode/:streetName",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 280,
        "y": 4300,
        "wires": [
            [
                "5fa6cb0f.775084"
            ]
        ]
    },
    {
        "id": "5fa6cb0f.775084",
        "type": "subflow:248b9587.09adfa",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "env": [],
        "x": 260,
        "y": 4400,
        "wires": [
            [
                "fb4cae0b.2857b"
            ]
        ]
    },
    {
        "id": "fb4cae0b.2857b",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "PS Locaclides y Calles",
        "func": "let zipCode = msg.req.params.zipCode;\n\n//Primero guardo marca que busco\nmsg.searchCriteria = msg.req.params.streetName;\n\nmsg.url = global.get(\"psegurosEmision_Url\") + `info/localidadesCalles/${zipCode}?apikey=` + global.get(\"psegurosApiKey\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 560,
        "y": 4400,
        "wires": [
            [
                "eb56589f.8d8948"
            ]
        ]
    },
    {
        "id": "eb56589f.8d8948",
        "type": "http request",
        "z": "7ee549ef.0fbb28",
        "name": "PS Locaclides y Calles",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 800,
        "y": 4400,
        "wires": [
            [
                "2b3faffa.51438",
                "128e9d9b.8460d2"
            ]
        ]
    },
    {
        "id": "eae2f48a.c5d3e8",
        "type": "http response",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1200,
        "y": 4400,
        "wires": []
    },
    {
        "id": "2b3faffa.51438",
        "type": "function-npm",
        "z": "7ee549ef.0fbb28",
        "name": "",
        "func": "const {distance, closest} = require('fastest-levenshtein');\n\n//Si encontre localidades o es Capital Federal\nif(msg.statusCode == 200) {\n    \n    try {\n        let locations = msg.payload;\n        let locationsFirstFilter = [];\n        \n        let searchCriteria = msg.searchCriteria;\n        \n        let results = [];\n        \n        //var COMA = /,/;\n    \n        node.warn(\"searchStreet - 1\");\n        \n        //Primer filtro por nombre de calle\n        locations.forEach(location => {\n            \n            //Solo incluyo las calles que incluyen el criterio\n            location.calle.toLowerCase().replace(/ /g, '').includes(searchCriteria) ? locationsFirstFilter.push(location): \"\";\n            \n        }) \n        \n        //Si encuentro en la lista filtrada, avanzo\n        if (locationsFirstFilter.length > 0) {\n            \n            locationsFirstFilter.forEach(location => {\n            let dist = distance(searchCriteria.toLowerCase(), location.calle.toLowerCase().replace(/ /g, ''));\n            results.push({dist, location});\n            })\n            \n        } else {\n        //Busco por calle si codigo de provincia es 1 y por localidad si es 2\n            locations.forEach(location => {\n                /*  if(COMA.test(location.calle)){\n                    let whereIsTheComa = location.calle.indexOf(\",\");\n                    let beforeComa = location.calle.slice(0, whereIsTheComa)\n                    let afterComa = location.calle.slice(whereIsTheComa+2)\n                    location.calle = afterComa + \" \" + beforeComa\n                }*/\n                let dist = distance(searchCriteria.toLowerCase(), location.calle.toLowerCase().replace(/ /g, ''));\n                results.push({dist, location});\n            }) \n            \n        }\n       \n        node.warn(\"searchStreet - 2\");\n    \n        //Algoritmo para ordenar\n        msg.results = results.sort((a,b) => (a.dist > b.dist) ? 1 : ((b.dist > a.dist) ? -1 : 0));\n        \n        node.warn(\"searchStreet - 3: \" + msg.results.length);\n        \n        //Limitar a 10 resultados\n        if (msg.results.length > 10)\n            msg.results = msg.results.slice(0,10);\n        \n        node.warn(\"searchStreet - 4: \" + msg.results.length);\n        \n        \n        //Devuelvo mejor resultado\n        msg.payload = msg.results;\n    \n    }catch (exception) {\n        node.error([\"Error\", exception])\n    }\n    \n} else {\n    \n    //No se encontraron localidades\n    \n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1010,
        "y": 4480,
        "wires": [
            [
                "eae2f48a.c5d3e8",
                "43c4e01a.03929"
            ]
        ]
    },
    {
        "id": "128e9d9b.8460d2",
        "type": "debug",
        "z": "7ee549ef.0fbb28",
        "name": "locationStreet 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 4580,
        "wires": []
    },
    {
        "id": "43c4e01a.03929",
        "type": "debug",
        "z": "7ee549ef.0fbb28",
        "name": "locationStreet 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 4580,
        "wires": []
    },
    {
        "id": "fcfb53f0.40a12",
        "type": "function",
        "z": "7ee549ef.0fbb28",
        "name": "Promo 3 - Check",
        "func": "\n//Selecciono primer plan???\nif (msg.payload.response.planes.length > 2)\n    return [msg, null];\nelse\n    return [null, msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1090,
        "y": 1500,
        "wires": [
            [
                "76d28ee6.db566",
                "47116385.b1d4cc"
            ],
            [
                "5ddad847.4f8f48",
                "20cdca00.513cd6"
            ]
        ]
    },
    {
        "id": "5ddad847.4f8f48",
        "type": "jimp-image",
        "z": "7ee549ef.0fbb28",
        "name": "Get template",
        "data": "image.payload",
        "dataType": "msg",
        "ret": "buf",
        "parameter1": "image.font",
        "parameter1Type": "msg",
        "parameter2": "image.x",
        "parameter2Type": "msg",
        "parameter3": "image.y",
        "parameter3Type": "msg",
        "parameter4": "image.text",
        "parameter4Type": "msg",
        "parameter5": "image.maxWidth",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "payload",
        "sendPropertyType": "msg",
        "parameterCount": 0,
        "jimpFunction": "none",
        "selectedJimpFunction": {
            "name": "none",
            "fn": "none",
            "description": "Just loads the image.",
            "parameters": []
        },
        "x": 2870,
        "y": 1560,
        "wires": [
            [
                "3a08c45e.21564c"
            ]
        ]
    },
    {
        "id": "47116385.b1d4cc",
        "type": "debug",
        "z": "7ee549ef.0fbb28",
        "name": "Promo 3 - Ok",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 1400,
        "wires": []
    },
    {
        "id": "20cdca00.513cd6",
        "type": "debug",
        "z": "7ee549ef.0fbb28",
        "name": "Promo 3 - not Ok",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 1560,
        "wires": []
    }
]